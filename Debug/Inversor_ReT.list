
Inversor_ReT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000367c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003858  08003858  000203f4  2**0
                  CONTENTS
  4 .ARM          00000008  08003858  08003858  00013858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003860  08003860  000203f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003860  08003860  00013860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003f4  20000000  08003868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000528  200003f4  08003c5c  000203f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000091c  08003c5c  0002091c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1de  00000000  00000000  00020424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec6  00000000  00000000  0002e602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  000304c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  00031108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021dbc  00000000  00000000  00031c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f248  00000000  00000000  00053a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cffc0  00000000  00000000  00062c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00132c44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d4  00000000  00000000  00132c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200003f4 	.word	0x200003f4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003828 	.word	0x08003828

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200003f8 	.word	0x200003f8
 8000200:	08003828 	.word	0x08003828

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	4b2d      	ldr	r3, [pc, #180]	; (80005d8 <MX_GPIO_Init+0xd0>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a2c      	ldr	r2, [pc, #176]	; (80005d8 <MX_GPIO_Init+0xd0>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b2a      	ldr	r3, [pc, #168]	; (80005d8 <MX_GPIO_Init+0xd0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	4b26      	ldr	r3, [pc, #152]	; (80005d8 <MX_GPIO_Init+0xd0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a25      	ldr	r2, [pc, #148]	; (80005d8 <MX_GPIO_Init+0xd0>)
 8000544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b23      	ldr	r3, [pc, #140]	; (80005d8 <MX_GPIO_Init+0xd0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <MX_GPIO_Init+0xd0>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a1e      	ldr	r2, [pc, #120]	; (80005d8 <MX_GPIO_Init+0xd0>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <MX_GPIO_Init+0xd0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <MX_GPIO_Init+0xd0>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <MX_GPIO_Init+0xd0>)
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <MX_GPIO_Init+0xd0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2120      	movs	r1, #32
 8000592:	4812      	ldr	r0, [pc, #72]	; (80005dc <MX_GPIO_Init+0xd4>)
 8000594:	f000 feec 	bl	8001370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000598:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800059e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4619      	mov	r1, r3
 80005ae:	480c      	ldr	r0, [pc, #48]	; (80005e0 <MX_GPIO_Init+0xd8>)
 80005b0:	f000 fd4a 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005b4:	2320      	movs	r3, #32
 80005b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c0:	2300      	movs	r3, #0
 80005c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4619      	mov	r1, r3
 80005ca:	4804      	ldr	r0, [pc, #16]	; (80005dc <MX_GPIO_Init+0xd4>)
 80005cc:	f000 fd3c 	bl	8001048 <HAL_GPIO_Init>

}
 80005d0:	bf00      	nop
 80005d2:	3728      	adds	r7, #40	; 0x28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40020000 	.word	0x40020000
 80005e0:	40020800 	.word	0x40020800

080005e4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM10) {
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d115      	bne.n	8000622 <HAL_TIM_PeriodElapsedCallback+0x3e>

		cont++;
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000600:	801a      	strh	r2, [r3, #0]

		if(cont == TAM_SIN - 1)
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	2bf9      	cmp	r3, #249	; 0xf9
 8000608:	d102      	bne.n	8000610 <HAL_TIM_PeriodElapsedCallback+0x2c>
			cont = 0;
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	801a      	strh	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, sin_wave_mod[cont]);
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800061c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000620:	635a      	str	r2, [r3, #52]	; 0x34
		//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_, sin_wave_mod[cont]);

	}
	}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40014400 	.word	0x40014400
 8000634:	200007f8 	.word	0x200007f8
 8000638:	200007fc 	.word	0x200007fc
 800063c:	20000410 	.word	0x20000410

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fb7b 	bl	8000d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f831 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f7ff ff5b 	bl	8000508 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000652:	f000 fad9 	bl	8000c08 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000656:	f000 f911 	bl	800087c <MX_TIM1_Init>
  MX_TIM3_Init();
 800065a:	f000 f9af 	bl	80009bc <MX_TIM3_Init>
  MX_TIM10_Init();
 800065e:	f000 f9f9 	bl	8000a54 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  	HAL_TIM_Base_Start_IT(&htim10);
 8000662:	480f      	ldr	r0, [pc, #60]	; (80006a0 <main+0x60>)
 8000664:	f001 fcd6 	bl	8002014 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000668:	2100      	movs	r1, #0
 800066a:	480e      	ldr	r0, [pc, #56]	; (80006a4 <main+0x64>)
 800066c:	f001 fd9c 	bl	80021a8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000670:	2100      	movs	r1, #0
 8000672:	480c      	ldr	r0, [pc, #48]	; (80006a4 <main+0x64>)
 8000674:	f002 fc2a 	bl	8002ecc <HAL_TIMEx_PWMN_Start>
		sin_wave[i] = ((sin(i * (DOISPI / TAM_SIN))) + 1) * ((200 + 1) / 2);
	}

*/

	for(int j = 0; j < TAM_SIN; j++){
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	e00b      	b.n	8000696 <main+0x56>

		sin_wave_mod[j] = sin_wave[j] / 2;
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <main+0x68>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000686:	085a      	lsrs	r2, r3, #1
 8000688:	4908      	ldr	r1, [pc, #32]	; (80006ac <main+0x6c>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int j = 0; j < TAM_SIN; j++){
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	3301      	adds	r3, #1
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2bf9      	cmp	r3, #249	; 0xf9
 800069a:	ddf0      	ble.n	800067e <main+0x3e>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800069c:	e7fe      	b.n	800069c <main+0x5c>
 800069e:	bf00      	nop
 80006a0:	2000088c 	.word	0x2000088c
 80006a4:	200007fc 	.word	0x200007fc
 80006a8:	20000000 	.word	0x20000000
 80006ac:	20000410 	.word	0x20000410

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	; 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	2234      	movs	r2, #52	; 0x34
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 f8aa 	bl	8003818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <SystemClock_Config+0xd4>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a29      	ldr	r2, [pc, #164]	; (8000784 <SystemClock_Config+0xd4>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b27      	ldr	r3, [pc, #156]	; (8000784 <SystemClock_Config+0xd4>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <SystemClock_Config+0xd8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006fc:	4a22      	ldr	r2, [pc, #136]	; (8000788 <SystemClock_Config+0xd8>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemClock_Config+0xd8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000724:	2310      	movs	r3, #16
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000728:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800072c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800072e:	2304      	movs	r3, #4
 8000730:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000736:	2302      	movs	r3, #2
 8000738:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4618      	mov	r0, r3
 8000740:	f001 f97a 	bl	8001a38 <HAL_RCC_OscConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800074a:	f000 f81f 	bl	800078c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074e:	230f      	movs	r3, #15
 8000750:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000752:	2302      	movs	r3, #2
 8000754:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	2102      	movs	r1, #2
 800076a:	4618      	mov	r0, r3
 800076c:	f000 fe1a 	bl	80013a4 <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000776:	f000 f809 	bl	800078c <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3750      	adds	r7, #80	; 0x50
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000794:	e7fe      	b.n	8000794 <Error_Handler+0x8>
	...

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <HAL_MspInit+0x4c>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	4a0f      	ldr	r2, [pc, #60]	; (80007e4 <HAL_MspInit+0x4c>)
 80007a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ac:	6453      	str	r3, [r2, #68]	; 0x44
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_MspInit+0x4c>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <HAL_MspInit+0x4c>)
 80007c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_MspInit+0x4c>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007d6:	2007      	movs	r0, #7
 80007d8:	f000 fbf4 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000834:	f000 fad6 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000840:	4803      	ldr	r0, [pc, #12]	; (8000850 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8000842:	f001 fd79 	bl	8002338 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8000846:	4803      	ldr	r0, [pc, #12]	; (8000854 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000848:	f001 fd76 	bl	8002338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200007fc 	.word	0x200007fc
 8000854:	2000088c 	.word	0x2000088c

08000858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <SystemInit+0x20>)
 800085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000862:	4a05      	ldr	r2, [pc, #20]	; (8000878 <SystemInit+0x20>)
 8000864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b096      	sub	sp, #88	; 0x58
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000882:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000890:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800089a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]
 80008aa:	615a      	str	r2, [r3, #20]
 80008ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2220      	movs	r2, #32
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 ffaf 	bl	8003818 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008ba:	4b3e      	ldr	r3, [pc, #248]	; (80009b4 <MX_TIM1_Init+0x138>)
 80008bc:	4a3e      	ldr	r2, [pc, #248]	; (80009b8 <MX_TIM1_Init+0x13c>)
 80008be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 28-1;
 80008c0:	4b3c      	ldr	r3, [pc, #240]	; (80009b4 <MX_TIM1_Init+0x138>)
 80008c2:	221b      	movs	r2, #27
 80008c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b3b      	ldr	r3, [pc, #236]	; (80009b4 <MX_TIM1_Init+0x138>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 80008cc:	4b39      	ldr	r3, [pc, #228]	; (80009b4 <MX_TIM1_Init+0x138>)
 80008ce:	22c7      	movs	r2, #199	; 0xc7
 80008d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d2:	4b38      	ldr	r3, [pc, #224]	; (80009b4 <MX_TIM1_Init+0x138>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008d8:	4b36      	ldr	r3, [pc, #216]	; (80009b4 <MX_TIM1_Init+0x138>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008de:	4b35      	ldr	r3, [pc, #212]	; (80009b4 <MX_TIM1_Init+0x138>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008e4:	4833      	ldr	r0, [pc, #204]	; (80009b4 <MX_TIM1_Init+0x138>)
 80008e6:	f001 fb45 	bl	8001f74 <HAL_TIM_Base_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80008f0:	f7ff ff4c 	bl	800078c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008fe:	4619      	mov	r1, r3
 8000900:	482c      	ldr	r0, [pc, #176]	; (80009b4 <MX_TIM1_Init+0x138>)
 8000902:	f001 fee3 	bl	80026cc <HAL_TIM_ConfigClockSource>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800090c:	f7ff ff3e 	bl	800078c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000910:	4828      	ldr	r0, [pc, #160]	; (80009b4 <MX_TIM1_Init+0x138>)
 8000912:	f001 fbef 	bl	80020f4 <HAL_TIM_PWM_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800091c:	f7ff ff36 	bl	800078c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000928:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800092c:	4619      	mov	r1, r3
 800092e:	4821      	ldr	r0, [pc, #132]	; (80009b4 <MX_TIM1_Init+0x138>)
 8000930:	f002 fb86 	bl	8003040 <HAL_TIMEx_MasterConfigSynchronization>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800093a:	f7ff ff27 	bl	800078c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093e:	2360      	movs	r3, #96	; 0x60
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000946:	2300      	movs	r3, #0
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800094a:	2300      	movs	r3, #0
 800094c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000956:	2300      	movs	r3, #0
 8000958:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800095a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095e:	2200      	movs	r2, #0
 8000960:	4619      	mov	r1, r3
 8000962:	4814      	ldr	r0, [pc, #80]	; (80009b4 <MX_TIM1_Init+0x138>)
 8000964:	f001 fdf0 	bl	8002548 <HAL_TIM_PWM_ConfigChannel>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800096e:	f7ff ff0d 	bl	800078c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 800097e:	2364      	movs	r3, #100	; 0x64
 8000980:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000986:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	4619      	mov	r1, r3
 8000994:	4807      	ldr	r0, [pc, #28]	; (80009b4 <MX_TIM1_Init+0x138>)
 8000996:	f002 fbcf 	bl	8003138 <HAL_TIMEx_ConfigBreakDeadTime>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80009a0:	f7ff fef4 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009a4:	4803      	ldr	r0, [pc, #12]	; (80009b4 <MX_TIM1_Init+0x138>)
 80009a6:	f000 f8d3 	bl	8000b50 <HAL_TIM_MspPostInit>

}
 80009aa:	bf00      	nop
 80009ac:	3758      	adds	r7, #88	; 0x58
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200007fc 	.word	0x200007fc
 80009b8:	40010000 	.word	0x40010000

080009bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d0:	463b      	mov	r3, r7
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_TIM3_Init+0x90>)
 80009da:	4a1d      	ldr	r2, [pc, #116]	; (8000a50 <MX_TIM3_Init+0x94>)
 80009dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 28-1;
 80009de:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_TIM3_Init+0x90>)
 80009e0:	221b      	movs	r2, #27
 80009e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e4:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_TIM3_Init+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200-1;
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_TIM3_Init+0x90>)
 80009ec:	22c7      	movs	r2, #199	; 0xc7
 80009ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_TIM3_Init+0x90>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_TIM3_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <MX_TIM3_Init+0x90>)
 80009fe:	f001 fab9 	bl	8001f74 <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000a08:	f7ff fec0 	bl	800078c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	4619      	mov	r1, r3
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_TIM3_Init+0x90>)
 8000a1a:	f001 fe57 	bl	80026cc <HAL_TIM_ConfigClockSource>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000a24:	f7ff feb2 	bl	800078c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_TIM3_Init+0x90>)
 8000a36:	f002 fb03 	bl	8003040 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000a40:	f7ff fea4 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000844 	.word	0x20000844
 8000a50:	40000400 	.word	0x40000400

08000a54 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000a58:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <MX_TIM10_Init+0x3c>)
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <MX_TIM10_Init+0x40>)
 8000a5c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 28-1;
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_TIM10_Init+0x3c>)
 8000a60:	221b      	movs	r2, #27
 8000a62:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <MX_TIM10_Init+0x3c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 200-1;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_TIM10_Init+0x3c>)
 8000a6c:	22c7      	movs	r2, #199	; 0xc7
 8000a6e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <MX_TIM10_Init+0x3c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_TIM10_Init+0x3c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_TIM10_Init+0x3c>)
 8000a7e:	f001 fa79 	bl	8001f74 <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8000a88:	f7ff fe80 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	2000088c 	.word	0x2000088c
 8000a94:	40014400 	.word	0x40014400

08000a98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a26      	ldr	r2, [pc, #152]	; (8000b40 <HAL_TIM_Base_MspInit+0xa8>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d116      	bne.n	8000ad8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <HAL_TIM_Base_MspInit+0xac>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a24      	ldr	r2, [pc, #144]	; (8000b44 <HAL_TIM_Base_MspInit+0xac>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <HAL_TIM_Base_MspInit+0xac>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2019      	movs	r0, #25
 8000acc:	f000 fa85 	bl	8000fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ad0:	2019      	movs	r0, #25
 8000ad2:	f000 fa9e 	bl	8001012 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8000ad6:	e02e      	b.n	8000b36 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM3)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a1a      	ldr	r2, [pc, #104]	; (8000b48 <HAL_TIM_Base_MspInit+0xb0>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d10e      	bne.n	8000b00 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_TIM_Base_MspInit+0xac>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a16      	ldr	r2, [pc, #88]	; (8000b44 <HAL_TIM_Base_MspInit+0xac>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <HAL_TIM_Base_MspInit+0xac>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]
}
 8000afe:	e01a      	b.n	8000b36 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM10)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <HAL_TIM_Base_MspInit+0xb4>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d115      	bne.n	8000b36 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_TIM_Base_MspInit+0xac>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <HAL_TIM_Base_MspInit+0xac>)
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_TIM_Base_MspInit+0xac>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2019      	movs	r0, #25
 8000b2c:	f000 fa55 	bl	8000fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b30:	2019      	movs	r0, #25
 8000b32:	f000 fa6e 	bl	8001012 <HAL_NVIC_EnableIRQ>
}
 8000b36:	bf00      	nop
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40010000 	.word	0x40010000
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40000400 	.word	0x40000400
 8000b4c:	40014400 	.word	0x40014400

08000b50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a22      	ldr	r2, [pc, #136]	; (8000bf8 <HAL_TIM_MspPostInit+0xa8>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d13d      	bne.n	8000bee <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <HAL_TIM_MspPostInit+0xac>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a20      	ldr	r2, [pc, #128]	; (8000bfc <HAL_TIM_MspPostInit+0xac>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <HAL_TIM_MspPostInit+0xac>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <HAL_TIM_MspPostInit+0xac>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a19      	ldr	r2, [pc, #100]	; (8000bfc <HAL_TIM_MspPostInit+0xac>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <HAL_TIM_MspPostInit+0xac>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000baa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	480e      	ldr	r0, [pc, #56]	; (8000c00 <HAL_TIM_MspPostInit+0xb0>)
 8000bc8:	f000 fa3e 	bl	8001048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	4806      	ldr	r0, [pc, #24]	; (8000c04 <HAL_TIM_MspPostInit+0xb4>)
 8000bea:	f000 fa2d 	bl	8001048 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40010000 	.word	0x40010000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020400 	.word	0x40020400
 8000c04:	40020000 	.word	0x40020000

08000c08 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <MX_USART2_UART_Init+0x50>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_USART2_UART_Init+0x4c>)
 8000c40:	f002 fb05 	bl	800324e <HAL_UART_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c4a:	f7ff fd9f 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200008d4 	.word	0x200008d4
 8000c58:	40004400 	.word	0x40004400

08000c5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <HAL_UART_MspInit+0x84>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d12b      	bne.n	8000cd6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_UART_MspInit+0x88>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cb6:	230c      	movs	r3, #12
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cc6:	2307      	movs	r3, #7
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <HAL_UART_MspInit+0x8c>)
 8000cd2:	f000 f9b9 	bl	8001048 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40004400 	.word	0x40004400
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000

08000cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cf2:	490e      	ldr	r1, [pc, #56]	; (8000d2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf4:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d08:	4c0b      	ldr	r4, [pc, #44]	; (8000d38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d16:	f7ff fd9f 	bl	8000858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1a:	f002 fd59 	bl	80037d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1e:	f7ff fc8f 	bl	8000640 <main>
  bx  lr    
 8000d22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d2c:	200003f4 	.word	0x200003f4
  ldr r2, =_sidata
 8000d30:	08003868 	.word	0x08003868
  ldr r2, =_sbss
 8000d34:	200003f4 	.word	0x200003f4
  ldr r4, =_ebss
 8000d38:	2000091c 	.word	0x2000091c

08000d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC_IRQHandler>
	...

08000d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <HAL_Init+0x40>)
 8000d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_Init+0x40>)
 8000d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <HAL_Init+0x40>)
 8000d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 f92b 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f000 f808 	bl	8000d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d74:	f7ff fd10 	bl	8000798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023c00 	.word	0x40023c00

08000d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_InitTick+0x54>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_InitTick+0x58>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f943 	bl	800102e <HAL_SYSTICK_Config>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00e      	b.n	8000dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	d80a      	bhi.n	8000dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db8:	2200      	movs	r2, #0
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f000 f90b 	bl	8000fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc4:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <HAL_InitTick+0x5c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e000      	b.n	8000dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200003e8 	.word	0x200003e8
 8000ddc:	200003f0 	.word	0x200003f0
 8000de0:	200003ec 	.word	0x200003ec

08000de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x20>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x24>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <HAL_IncTick+0x24>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200003f0 	.word	0x200003f0
 8000e08:	20000918 	.word	0x20000918

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000918 	.word	0x20000918

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0b      	blt.n	8000eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f003 021f 	and.w	r2, r3, #31
 8000ea0:	4907      	ldr	r1, [pc, #28]	; (8000ec0 <__NVIC_EnableIRQ+0x38>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	; (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	; (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	; 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f90:	d301      	bcc.n	8000f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00f      	b.n	8000fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <SysTick_Config+0x40>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f7ff ff8e 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <SysTick_Config+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <SysTick_Config+0x40>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff29 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fec:	f7ff ff3e 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	6978      	ldr	r0, [r7, #20]
 8000ff8:	f7ff ff8e 	bl	8000f18 <NVIC_EncodePriority>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <__NVIC_SetPriority>
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff31 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffa2 	bl	8000f80 <SysTick_Config>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e165      	b.n	8001330 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	f040 8154 	bne.w	800132a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d005      	beq.n	800109a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001096:	2b02      	cmp	r3, #2
 8001098:	d130      	bne.n	80010fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	f003 0201 	and.w	r2, r3, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b03      	cmp	r3, #3
 8001106:	d017      	beq.n	8001138 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d123      	bne.n	800118c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	69b9      	ldr	r1, [r7, #24]
 8001188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0203 	and.w	r2, r3, #3
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80ae 	beq.w	800132a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b5d      	ldr	r3, [pc, #372]	; (8001348 <HAL_GPIO_Init+0x300>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a5c      	ldr	r2, [pc, #368]	; (8001348 <HAL_GPIO_Init+0x300>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b5a      	ldr	r3, [pc, #360]	; (8001348 <HAL_GPIO_Init+0x300>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ea:	4a58      	ldr	r2, [pc, #352]	; (800134c <HAL_GPIO_Init+0x304>)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4f      	ldr	r2, [pc, #316]	; (8001350 <HAL_GPIO_Init+0x308>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d025      	beq.n	8001262 <HAL_GPIO_Init+0x21a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4e      	ldr	r2, [pc, #312]	; (8001354 <HAL_GPIO_Init+0x30c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01f      	beq.n	800125e <HAL_GPIO_Init+0x216>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4d      	ldr	r2, [pc, #308]	; (8001358 <HAL_GPIO_Init+0x310>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x212>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4c      	ldr	r2, [pc, #304]	; (800135c <HAL_GPIO_Init+0x314>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x20e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4b      	ldr	r2, [pc, #300]	; (8001360 <HAL_GPIO_Init+0x318>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x20a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4a      	ldr	r2, [pc, #296]	; (8001364 <HAL_GPIO_Init+0x31c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x206>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a49      	ldr	r2, [pc, #292]	; (8001368 <HAL_GPIO_Init+0x320>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x202>
 8001246:	2306      	movs	r3, #6
 8001248:	e00c      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 800124a:	2307      	movs	r3, #7
 800124c:	e00a      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 800124e:	2305      	movs	r3, #5
 8001250:	e008      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 8001252:	2304      	movs	r3, #4
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 8001256:	2303      	movs	r3, #3
 8001258:	e004      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 800125a:	2302      	movs	r3, #2
 800125c:	e002      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x21c>
 8001262:	2300      	movs	r3, #0
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	f002 0203 	and.w	r2, r2, #3
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	4093      	lsls	r3, r2
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001274:	4935      	ldr	r1, [pc, #212]	; (800134c <HAL_GPIO_Init+0x304>)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	3302      	adds	r3, #2
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001282:	4b3a      	ldr	r3, [pc, #232]	; (800136c <HAL_GPIO_Init+0x324>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012a6:	4a31      	ldr	r2, [pc, #196]	; (800136c <HAL_GPIO_Init+0x324>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012ac:	4b2f      	ldr	r3, [pc, #188]	; (800136c <HAL_GPIO_Init+0x324>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d0:	4a26      	ldr	r2, [pc, #152]	; (800136c <HAL_GPIO_Init+0x324>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012d6:	4b25      	ldr	r3, [pc, #148]	; (800136c <HAL_GPIO_Init+0x324>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012fa:	4a1c      	ldr	r2, [pc, #112]	; (800136c <HAL_GPIO_Init+0x324>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <HAL_GPIO_Init+0x324>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001324:	4a11      	ldr	r2, [pc, #68]	; (800136c <HAL_GPIO_Init+0x324>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3301      	adds	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b0f      	cmp	r3, #15
 8001334:	f67f ae96 	bls.w	8001064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40013800 	.word	0x40013800
 8001350:	40020000 	.word	0x40020000
 8001354:	40020400 	.word	0x40020400
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40021000 	.word	0x40021000
 8001364:	40021400 	.word	0x40021400
 8001368:	40021800 	.word	0x40021800
 800136c:	40013c00 	.word	0x40013c00

08001370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
 800137c:	4613      	mov	r3, r2
 800137e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001380:	787b      	ldrb	r3, [r7, #1]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800138c:	e003      	b.n	8001396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	041a      	lsls	r2, r3, #16
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	619a      	str	r2, [r3, #24]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0cc      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013b8:	4b68      	ldr	r3, [pc, #416]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 030f 	and.w	r3, r3, #15
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d90c      	bls.n	80013e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c6:	4b65      	ldr	r3, [pc, #404]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ce:	4b63      	ldr	r3, [pc, #396]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d001      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0b8      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d020      	beq.n	800142e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d005      	beq.n	8001404 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013f8:	4b59      	ldr	r3, [pc, #356]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	4a58      	ldr	r2, [pc, #352]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001402:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001410:	4b53      	ldr	r3, [pc, #332]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	4a52      	ldr	r2, [pc, #328]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001416:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800141a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800141c:	4b50      	ldr	r3, [pc, #320]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	494d      	ldr	r1, [pc, #308]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	4313      	orrs	r3, r2
 800142c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d044      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d107      	bne.n	8001452 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001442:	4b47      	ldr	r3, [pc, #284]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d119      	bne.n	8001482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e07f      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d003      	beq.n	8001462 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800145e:	2b03      	cmp	r3, #3
 8001460:	d107      	bne.n	8001472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001462:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e06f      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001472:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e067      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001482:	4b37      	ldr	r3, [pc, #220]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f023 0203 	bic.w	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	4934      	ldr	r1, [pc, #208]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001490:	4313      	orrs	r3, r2
 8001492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001494:	f7ff fcba 	bl	8000e0c <HAL_GetTick>
 8001498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149a:	e00a      	b.n	80014b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800149c:	f7ff fcb6 	bl	8000e0c <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e04f      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b2:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 020c 	and.w	r2, r3, #12
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d1eb      	bne.n	800149c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014c4:	4b25      	ldr	r3, [pc, #148]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 030f 	and.w	r3, r3, #15
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d20c      	bcs.n	80014ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d2:	4b22      	ldr	r3, [pc, #136]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_RCC_ClockConfig+0x1b8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d001      	beq.n	80014ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e032      	b.n	8001552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4916      	ldr	r1, [pc, #88]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	4313      	orrs	r3, r2
 8001508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d009      	beq.n	800152a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	490e      	ldr	r1, [pc, #56]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	4313      	orrs	r3, r2
 8001528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800152a:	f000 f855 	bl	80015d8 <HAL_RCC_GetSysClockFreq>
 800152e:	4602      	mov	r2, r0
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	490a      	ldr	r1, [pc, #40]	; (8001564 <HAL_RCC_ClockConfig+0x1c0>)
 800153c:	5ccb      	ldrb	r3, [r1, r3]
 800153e:	fa22 f303 	lsr.w	r3, r2, r3
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_RCC_ClockConfig+0x1c8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fc1a 	bl	8000d84 <HAL_InitTick>

  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023c00 	.word	0x40023c00
 8001560:	40023800 	.word	0x40023800
 8001564:	08003840 	.word	0x08003840
 8001568:	200003e8 	.word	0x200003e8
 800156c:	200003ec 	.word	0x200003ec

08001570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_RCC_GetHCLKFreq+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	200003e8 	.word	0x200003e8

08001588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800158c:	f7ff fff0 	bl	8001570 <HAL_RCC_GetHCLKFreq>
 8001590:	4602      	mov	r2, r0
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	0a9b      	lsrs	r3, r3, #10
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	4903      	ldr	r1, [pc, #12]	; (80015ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800159e:	5ccb      	ldrb	r3, [r1, r3]
 80015a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40023800 	.word	0x40023800
 80015ac:	08003850 	.word	0x08003850

080015b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015b4:	f7ff ffdc 	bl	8001570 <HAL_RCC_GetHCLKFreq>
 80015b8:	4602      	mov	r2, r0
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	0b5b      	lsrs	r3, r3, #13
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	4903      	ldr	r1, [pc, #12]	; (80015d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015c6:	5ccb      	ldrb	r3, [r1, r3]
 80015c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40023800 	.word	0x40023800
 80015d4:	08003850 	.word	0x08003850

080015d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015dc:	b0ae      	sub	sp, #184	; 0xb8
 80015de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015fe:	4bcb      	ldr	r3, [pc, #812]	; (800192c <HAL_RCC_GetSysClockFreq+0x354>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b0c      	cmp	r3, #12
 8001608:	f200 8206 	bhi.w	8001a18 <HAL_RCC_GetSysClockFreq+0x440>
 800160c:	a201      	add	r2, pc, #4	; (adr r2, 8001614 <HAL_RCC_GetSysClockFreq+0x3c>)
 800160e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001612:	bf00      	nop
 8001614:	08001649 	.word	0x08001649
 8001618:	08001a19 	.word	0x08001a19
 800161c:	08001a19 	.word	0x08001a19
 8001620:	08001a19 	.word	0x08001a19
 8001624:	08001651 	.word	0x08001651
 8001628:	08001a19 	.word	0x08001a19
 800162c:	08001a19 	.word	0x08001a19
 8001630:	08001a19 	.word	0x08001a19
 8001634:	08001659 	.word	0x08001659
 8001638:	08001a19 	.word	0x08001a19
 800163c:	08001a19 	.word	0x08001a19
 8001640:	08001a19 	.word	0x08001a19
 8001644:	08001849 	.word	0x08001849
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001648:	4bb9      	ldr	r3, [pc, #740]	; (8001930 <HAL_RCC_GetSysClockFreq+0x358>)
 800164a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800164e:	e1e7      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001650:	4bb8      	ldr	r3, [pc, #736]	; (8001934 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001652:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001656:	e1e3      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001658:	4bb4      	ldr	r3, [pc, #720]	; (800192c <HAL_RCC_GetSysClockFreq+0x354>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001660:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001664:	4bb1      	ldr	r3, [pc, #708]	; (800192c <HAL_RCC_GetSysClockFreq+0x354>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d071      	beq.n	8001754 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001670:	4bae      	ldr	r3, [pc, #696]	; (800192c <HAL_RCC_GetSysClockFreq+0x354>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	099b      	lsrs	r3, r3, #6
 8001676:	2200      	movs	r2, #0
 8001678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800167c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001680:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001688:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800168c:	2300      	movs	r3, #0
 800168e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001692:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001696:	4622      	mov	r2, r4
 8001698:	462b      	mov	r3, r5
 800169a:	f04f 0000 	mov.w	r0, #0
 800169e:	f04f 0100 	mov.w	r1, #0
 80016a2:	0159      	lsls	r1, r3, #5
 80016a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016a8:	0150      	lsls	r0, r2, #5
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4621      	mov	r1, r4
 80016b0:	1a51      	subs	r1, r2, r1
 80016b2:	6439      	str	r1, [r7, #64]	; 0x40
 80016b4:	4629      	mov	r1, r5
 80016b6:	eb63 0301 	sbc.w	r3, r3, r1
 80016ba:	647b      	str	r3, [r7, #68]	; 0x44
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80016c8:	4649      	mov	r1, r9
 80016ca:	018b      	lsls	r3, r1, #6
 80016cc:	4641      	mov	r1, r8
 80016ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016d2:	4641      	mov	r1, r8
 80016d4:	018a      	lsls	r2, r1, #6
 80016d6:	4641      	mov	r1, r8
 80016d8:	1a51      	subs	r1, r2, r1
 80016da:	63b9      	str	r1, [r7, #56]	; 0x38
 80016dc:	4649      	mov	r1, r9
 80016de:	eb63 0301 	sbc.w	r3, r3, r1
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80016f0:	4649      	mov	r1, r9
 80016f2:	00cb      	lsls	r3, r1, #3
 80016f4:	4641      	mov	r1, r8
 80016f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016fa:	4641      	mov	r1, r8
 80016fc:	00ca      	lsls	r2, r1, #3
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	4603      	mov	r3, r0
 8001704:	4622      	mov	r2, r4
 8001706:	189b      	adds	r3, r3, r2
 8001708:	633b      	str	r3, [r7, #48]	; 0x30
 800170a:	462b      	mov	r3, r5
 800170c:	460a      	mov	r2, r1
 800170e:	eb42 0303 	adc.w	r3, r2, r3
 8001712:	637b      	str	r3, [r7, #52]	; 0x34
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001720:	4629      	mov	r1, r5
 8001722:	024b      	lsls	r3, r1, #9
 8001724:	4621      	mov	r1, r4
 8001726:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800172a:	4621      	mov	r1, r4
 800172c:	024a      	lsls	r2, r1, #9
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001736:	2200      	movs	r2, #0
 8001738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800173c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001740:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001744:	f7fe fd5e 	bl	8000204 <__aeabi_uldivmod>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4613      	mov	r3, r2
 800174e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001752:	e067      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001754:	4b75      	ldr	r3, [pc, #468]	; (800192c <HAL_RCC_GetSysClockFreq+0x354>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	099b      	lsrs	r3, r3, #6
 800175a:	2200      	movs	r2, #0
 800175c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001760:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001764:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800176c:	67bb      	str	r3, [r7, #120]	; 0x78
 800176e:	2300      	movs	r3, #0
 8001770:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001772:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001776:	4622      	mov	r2, r4
 8001778:	462b      	mov	r3, r5
 800177a:	f04f 0000 	mov.w	r0, #0
 800177e:	f04f 0100 	mov.w	r1, #0
 8001782:	0159      	lsls	r1, r3, #5
 8001784:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001788:	0150      	lsls	r0, r2, #5
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4621      	mov	r1, r4
 8001790:	1a51      	subs	r1, r2, r1
 8001792:	62b9      	str	r1, [r7, #40]	; 0x28
 8001794:	4629      	mov	r1, r5
 8001796:	eb63 0301 	sbc.w	r3, r3, r1
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80017a8:	4649      	mov	r1, r9
 80017aa:	018b      	lsls	r3, r1, #6
 80017ac:	4641      	mov	r1, r8
 80017ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017b2:	4641      	mov	r1, r8
 80017b4:	018a      	lsls	r2, r1, #6
 80017b6:	4641      	mov	r1, r8
 80017b8:	ebb2 0a01 	subs.w	sl, r2, r1
 80017bc:	4649      	mov	r1, r9
 80017be:	eb63 0b01 	sbc.w	fp, r3, r1
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017d6:	4692      	mov	sl, r2
 80017d8:	469b      	mov	fp, r3
 80017da:	4623      	mov	r3, r4
 80017dc:	eb1a 0303 	adds.w	r3, sl, r3
 80017e0:	623b      	str	r3, [r7, #32]
 80017e2:	462b      	mov	r3, r5
 80017e4:	eb4b 0303 	adc.w	r3, fp, r3
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017f6:	4629      	mov	r1, r5
 80017f8:	028b      	lsls	r3, r1, #10
 80017fa:	4621      	mov	r1, r4
 80017fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001800:	4621      	mov	r1, r4
 8001802:	028a      	lsls	r2, r1, #10
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800180c:	2200      	movs	r2, #0
 800180e:	673b      	str	r3, [r7, #112]	; 0x70
 8001810:	677a      	str	r2, [r7, #116]	; 0x74
 8001812:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001816:	f7fe fcf5 	bl	8000204 <__aeabi_uldivmod>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4613      	mov	r3, r2
 8001820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001824:	4b41      	ldr	r3, [pc, #260]	; (800192c <HAL_RCC_GetSysClockFreq+0x354>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	0c1b      	lsrs	r3, r3, #16
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	3301      	adds	r3, #1
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001836:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800183a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800183e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001842:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001846:	e0eb      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001848:	4b38      	ldr	r3, [pc, #224]	; (800192c <HAL_RCC_GetSysClockFreq+0x354>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001850:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001854:	4b35      	ldr	r3, [pc, #212]	; (800192c <HAL_RCC_GetSysClockFreq+0x354>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d06b      	beq.n	8001938 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001860:	4b32      	ldr	r3, [pc, #200]	; (800192c <HAL_RCC_GetSysClockFreq+0x354>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	2200      	movs	r2, #0
 8001868:	66bb      	str	r3, [r7, #104]	; 0x68
 800186a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800186c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800186e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001872:	663b      	str	r3, [r7, #96]	; 0x60
 8001874:	2300      	movs	r3, #0
 8001876:	667b      	str	r3, [r7, #100]	; 0x64
 8001878:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800187c:	4622      	mov	r2, r4
 800187e:	462b      	mov	r3, r5
 8001880:	f04f 0000 	mov.w	r0, #0
 8001884:	f04f 0100 	mov.w	r1, #0
 8001888:	0159      	lsls	r1, r3, #5
 800188a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800188e:	0150      	lsls	r0, r2, #5
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4621      	mov	r1, r4
 8001896:	1a51      	subs	r1, r2, r1
 8001898:	61b9      	str	r1, [r7, #24]
 800189a:	4629      	mov	r1, r5
 800189c:	eb63 0301 	sbc.w	r3, r3, r1
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80018ae:	4659      	mov	r1, fp
 80018b0:	018b      	lsls	r3, r1, #6
 80018b2:	4651      	mov	r1, sl
 80018b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018b8:	4651      	mov	r1, sl
 80018ba:	018a      	lsls	r2, r1, #6
 80018bc:	4651      	mov	r1, sl
 80018be:	ebb2 0801 	subs.w	r8, r2, r1
 80018c2:	4659      	mov	r1, fp
 80018c4:	eb63 0901 	sbc.w	r9, r3, r1
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018dc:	4690      	mov	r8, r2
 80018de:	4699      	mov	r9, r3
 80018e0:	4623      	mov	r3, r4
 80018e2:	eb18 0303 	adds.w	r3, r8, r3
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	462b      	mov	r3, r5
 80018ea:	eb49 0303 	adc.w	r3, r9, r3
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018fc:	4629      	mov	r1, r5
 80018fe:	024b      	lsls	r3, r1, #9
 8001900:	4621      	mov	r1, r4
 8001902:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001906:	4621      	mov	r1, r4
 8001908:	024a      	lsls	r2, r1, #9
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001912:	2200      	movs	r2, #0
 8001914:	65bb      	str	r3, [r7, #88]	; 0x58
 8001916:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001918:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800191c:	f7fe fc72 	bl	8000204 <__aeabi_uldivmod>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4613      	mov	r3, r2
 8001926:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800192a:	e065      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x420>
 800192c:	40023800 	.word	0x40023800
 8001930:	00f42400 	.word	0x00f42400
 8001934:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001938:	4b3d      	ldr	r3, [pc, #244]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x458>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	099b      	lsrs	r3, r3, #6
 800193e:	2200      	movs	r2, #0
 8001940:	4618      	mov	r0, r3
 8001942:	4611      	mov	r1, r2
 8001944:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001948:	653b      	str	r3, [r7, #80]	; 0x50
 800194a:	2300      	movs	r3, #0
 800194c:	657b      	str	r3, [r7, #84]	; 0x54
 800194e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001952:	4642      	mov	r2, r8
 8001954:	464b      	mov	r3, r9
 8001956:	f04f 0000 	mov.w	r0, #0
 800195a:	f04f 0100 	mov.w	r1, #0
 800195e:	0159      	lsls	r1, r3, #5
 8001960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001964:	0150      	lsls	r0, r2, #5
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4641      	mov	r1, r8
 800196c:	1a51      	subs	r1, r2, r1
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	4649      	mov	r1, r9
 8001972:	eb63 0301 	sbc.w	r3, r3, r1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001984:	4659      	mov	r1, fp
 8001986:	018b      	lsls	r3, r1, #6
 8001988:	4651      	mov	r1, sl
 800198a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800198e:	4651      	mov	r1, sl
 8001990:	018a      	lsls	r2, r1, #6
 8001992:	4651      	mov	r1, sl
 8001994:	1a54      	subs	r4, r2, r1
 8001996:	4659      	mov	r1, fp
 8001998:	eb63 0501 	sbc.w	r5, r3, r1
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	00eb      	lsls	r3, r5, #3
 80019a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019aa:	00e2      	lsls	r2, r4, #3
 80019ac:	4614      	mov	r4, r2
 80019ae:	461d      	mov	r5, r3
 80019b0:	4643      	mov	r3, r8
 80019b2:	18e3      	adds	r3, r4, r3
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	464b      	mov	r3, r9
 80019b8:	eb45 0303 	adc.w	r3, r5, r3
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ca:	4629      	mov	r1, r5
 80019cc:	028b      	lsls	r3, r1, #10
 80019ce:	4621      	mov	r1, r4
 80019d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019d4:	4621      	mov	r1, r4
 80019d6:	028a      	lsls	r2, r1, #10
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019e0:	2200      	movs	r2, #0
 80019e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80019e4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80019ea:	f7fe fc0b 	bl	8000204 <__aeabi_uldivmod>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4613      	mov	r3, r2
 80019f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019f8:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x458>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	0f1b      	lsrs	r3, r3, #28
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001a06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a16:	e003      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	37b8      	adds	r7, #184	; 0xb8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	00f42400 	.word	0x00f42400

08001a38 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e28d      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 8083 	beq.w	8001b5e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a58:	4b94      	ldr	r3, [pc, #592]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d019      	beq.n	8001a98 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a64:	4b91      	ldr	r3, [pc, #580]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a70:	4b8e      	ldr	r3, [pc, #568]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a7c:	d00c      	beq.n	8001a98 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a7e:	4b8b      	ldr	r3, [pc, #556]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d112      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a8a:	4b88      	ldr	r3, [pc, #544]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a96:	d10b      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a98:	4b84      	ldr	r3, [pc, #528]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d05b      	beq.n	8001b5c <HAL_RCC_OscConfig+0x124>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d157      	bne.n	8001b5c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e25a      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab8:	d106      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x90>
 8001aba:	4b7c      	ldr	r3, [pc, #496]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a7b      	ldr	r2, [pc, #492]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e01d      	b.n	8001b04 <HAL_RCC_OscConfig+0xcc>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0xb4>
 8001ad2:	4b76      	ldr	r3, [pc, #472]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a75      	ldr	r2, [pc, #468]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	4b73      	ldr	r3, [pc, #460]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a72      	ldr	r2, [pc, #456]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e00b      	b.n	8001b04 <HAL_RCC_OscConfig+0xcc>
 8001aec:	4b6f      	ldr	r3, [pc, #444]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a6e      	ldr	r2, [pc, #440]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	4b6c      	ldr	r3, [pc, #432]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a6b      	ldr	r2, [pc, #428]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d013      	beq.n	8001b34 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0c:	f7ff f97e 	bl	8000e0c <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff f97a 	bl	8000e0c <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	; 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e21f      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	4b61      	ldr	r3, [pc, #388]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0xdc>
 8001b32:	e014      	b.n	8001b5e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff f96a 	bl	8000e0c <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff f966 	bl	8000e0c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	; 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e20b      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	4b57      	ldr	r3, [pc, #348]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x104>
 8001b5a:	e000      	b.n	8001b5e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d06f      	beq.n	8001c4a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b6a:	4b50      	ldr	r3, [pc, #320]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d017      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b76:	4b4d      	ldr	r3, [pc, #308]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d105      	bne.n	8001b8e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b82:	4b4a      	ldr	r3, [pc, #296]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00b      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8e:	4b47      	ldr	r3, [pc, #284]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b96:	2b0c      	cmp	r3, #12
 8001b98:	d11c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b9a:	4b44      	ldr	r3, [pc, #272]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d116      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba6:	4b41      	ldr	r3, [pc, #260]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <HAL_RCC_OscConfig+0x186>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d001      	beq.n	8001bbe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e1d3      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbe:	4b3b      	ldr	r3, [pc, #236]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4937      	ldr	r1, [pc, #220]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd2:	e03a      	b.n	8001c4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d020      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bdc:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <HAL_RCC_OscConfig+0x278>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be2:	f7ff f913 	bl	8000e0c <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bea:	f7ff f90f 	bl	8000e0c <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e1b4      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c08:	4b28      	ldr	r3, [pc, #160]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	4925      	ldr	r1, [pc, #148]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]
 8001c1c:	e015      	b.n	8001c4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1e:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <HAL_RCC_OscConfig+0x278>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7ff f8f2 	bl	8000e0c <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2c:	f7ff f8ee 	bl	8000e0c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e193      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d036      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d016      	beq.n	8001c8c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <HAL_RCC_OscConfig+0x27c>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c64:	f7ff f8d2 	bl	8000e0c <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c6c:	f7ff f8ce 	bl	8000e0c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e173      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_RCC_OscConfig+0x274>)
 8001c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x234>
 8001c8a:	e01b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_RCC_OscConfig+0x27c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c92:	f7ff f8bb 	bl	8000e0c <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c98:	e00e      	b.n	8001cb8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c9a:	f7ff f8b7 	bl	8000e0c <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d907      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e15c      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	42470000 	.word	0x42470000
 8001cb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb8:	4b8a      	ldr	r3, [pc, #552]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1ea      	bne.n	8001c9a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 8097 	beq.w	8001e00 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd6:	4b83      	ldr	r3, [pc, #524]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10f      	bne.n	8001d02 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	4b7f      	ldr	r3, [pc, #508]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a7e      	ldr	r2, [pc, #504]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b7c      	ldr	r3, [pc, #496]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d02:	4b79      	ldr	r3, [pc, #484]	; (8001ee8 <HAL_RCC_OscConfig+0x4b0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d118      	bne.n	8001d40 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0e:	4b76      	ldr	r3, [pc, #472]	; (8001ee8 <HAL_RCC_OscConfig+0x4b0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a75      	ldr	r2, [pc, #468]	; (8001ee8 <HAL_RCC_OscConfig+0x4b0>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1a:	f7ff f877 	bl	8000e0c <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d22:	f7ff f873 	bl	8000e0c <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e118      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d34:	4b6c      	ldr	r3, [pc, #432]	; (8001ee8 <HAL_RCC_OscConfig+0x4b0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x31e>
 8001d48:	4b66      	ldr	r3, [pc, #408]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4c:	4a65      	ldr	r2, [pc, #404]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6713      	str	r3, [r2, #112]	; 0x70
 8001d54:	e01c      	b.n	8001d90 <HAL_RCC_OscConfig+0x358>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b05      	cmp	r3, #5
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x340>
 8001d5e:	4b61      	ldr	r3, [pc, #388]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d62:	4a60      	ldr	r2, [pc, #384]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6a:	4b5e      	ldr	r3, [pc, #376]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6e:	4a5d      	ldr	r2, [pc, #372]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6713      	str	r3, [r2, #112]	; 0x70
 8001d76:	e00b      	b.n	8001d90 <HAL_RCC_OscConfig+0x358>
 8001d78:	4b5a      	ldr	r3, [pc, #360]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7c:	4a59      	ldr	r2, [pc, #356]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001d7e:	f023 0301 	bic.w	r3, r3, #1
 8001d82:	6713      	str	r3, [r2, #112]	; 0x70
 8001d84:	4b57      	ldr	r3, [pc, #348]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	4a56      	ldr	r2, [pc, #344]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001d8a:	f023 0304 	bic.w	r3, r3, #4
 8001d8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d015      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d98:	f7ff f838 	bl	8000e0c <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da0:	f7ff f834 	bl	8000e0c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e0d7      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db6:	4b4b      	ldr	r3, [pc, #300]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0ee      	beq.n	8001da0 <HAL_RCC_OscConfig+0x368>
 8001dc2:	e014      	b.n	8001dee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc4:	f7ff f822 	bl	8000e0c <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dca:	e00a      	b.n	8001de2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dcc:	f7ff f81e 	bl	8000e0c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e0c1      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de2:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1ee      	bne.n	8001dcc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d105      	bne.n	8001e00 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df4:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	4a3a      	ldr	r2, [pc, #232]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 80ad 	beq.w	8001f64 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e0a:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d060      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d145      	bne.n	8001eaa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1e:	4b33      	ldr	r3, [pc, #204]	; (8001eec <HAL_RCC_OscConfig+0x4b4>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e24:	f7fe fff2 	bl	8000e0c <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7fe ffee 	bl	8000e0c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e093      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3e:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69da      	ldr	r2, [r3, #28]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	019b      	lsls	r3, r3, #6
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	085b      	lsrs	r3, r3, #1
 8001e62:	3b01      	subs	r3, #1
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	061b      	lsls	r3, r3, #24
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	071b      	lsls	r3, r3, #28
 8001e76:	491b      	ldr	r1, [pc, #108]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <HAL_RCC_OscConfig+0x4b4>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e82:	f7fe ffc3 	bl	8000e0c <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7fe ffbf 	bl	8000e0c <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e064      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x452>
 8001ea8:	e05c      	b.n	8001f64 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_RCC_OscConfig+0x4b4>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7fe ffac 	bl	8000e0c <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7fe ffa8 	bl	8000e0c <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e04d      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_RCC_OscConfig+0x4ac>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x480>
 8001ed6:	e045      	b.n	8001f64 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e040      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ef0:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <HAL_RCC_OscConfig+0x538>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d030      	beq.n	8001f60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d129      	bne.n	8001f60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d122      	bne.n	8001f60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f20:	4013      	ands	r3, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d119      	bne.n	8001f60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	085b      	lsrs	r3, r3, #1
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d10f      	bne.n	8001f60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d107      	bne.n	8001f60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800

08001f74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e041      	b.n	800200a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fd7c 	bl	8000a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	f000 fc7a 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d001      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e04e      	b.n	80020ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a23      	ldr	r2, [pc, #140]	; (80020d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d022      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x80>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002056:	d01d      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x80>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1f      	ldr	r2, [pc, #124]	; (80020dc <HAL_TIM_Base_Start_IT+0xc8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d018      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x80>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1e      	ldr	r2, [pc, #120]	; (80020e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d013      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x80>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00e      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x80>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a1b      	ldr	r2, [pc, #108]	; (80020e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d009      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x80>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a19      	ldr	r2, [pc, #100]	; (80020ec <HAL_TIM_Base_Start_IT+0xd8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d004      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x80>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d111      	bne.n	80020b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d010      	beq.n	80020c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0201 	orr.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b6:	e007      	b.n	80020c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40010000 	.word	0x40010000
 80020dc:	40000400 	.word	0x40000400
 80020e0:	40000800 	.word	0x40000800
 80020e4:	40000c00 	.word	0x40000c00
 80020e8:	40010400 	.word	0x40010400
 80020ec:	40014000 	.word	0x40014000
 80020f0:	40001800 	.word	0x40001800

080020f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e041      	b.n	800218a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f839 	bl	8002192 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3304      	adds	r3, #4
 8002130:	4619      	mov	r1, r3
 8002132:	4610      	mov	r0, r2
 8002134:	f000 fbba 	bl	80028ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d109      	bne.n	80021cc <HAL_TIM_PWM_Start+0x24>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	bf14      	ite	ne
 80021c4:	2301      	movne	r3, #1
 80021c6:	2300      	moveq	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	e022      	b.n	8002212 <HAL_TIM_PWM_Start+0x6a>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d109      	bne.n	80021e6 <HAL_TIM_PWM_Start+0x3e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	bf14      	ite	ne
 80021de:	2301      	movne	r3, #1
 80021e0:	2300      	moveq	r3, #0
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	e015      	b.n	8002212 <HAL_TIM_PWM_Start+0x6a>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d109      	bne.n	8002200 <HAL_TIM_PWM_Start+0x58>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	bf14      	ite	ne
 80021f8:	2301      	movne	r3, #1
 80021fa:	2300      	moveq	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	e008      	b.n	8002212 <HAL_TIM_PWM_Start+0x6a>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b01      	cmp	r3, #1
 800220a:	bf14      	ite	ne
 800220c:	2301      	movne	r3, #1
 800220e:	2300      	moveq	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e07c      	b.n	8002314 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d104      	bne.n	800222a <HAL_TIM_PWM_Start+0x82>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002228:	e013      	b.n	8002252 <HAL_TIM_PWM_Start+0xaa>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b04      	cmp	r3, #4
 800222e:	d104      	bne.n	800223a <HAL_TIM_PWM_Start+0x92>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002238:	e00b      	b.n	8002252 <HAL_TIM_PWM_Start+0xaa>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b08      	cmp	r3, #8
 800223e:	d104      	bne.n	800224a <HAL_TIM_PWM_Start+0xa2>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002248:	e003      	b.n	8002252 <HAL_TIM_PWM_Start+0xaa>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2202      	movs	r2, #2
 800224e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2201      	movs	r2, #1
 8002258:	6839      	ldr	r1, [r7, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fe10 	bl	8002e80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a2d      	ldr	r2, [pc, #180]	; (800231c <HAL_TIM_PWM_Start+0x174>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d004      	beq.n	8002274 <HAL_TIM_PWM_Start+0xcc>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a2c      	ldr	r2, [pc, #176]	; (8002320 <HAL_TIM_PWM_Start+0x178>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d101      	bne.n	8002278 <HAL_TIM_PWM_Start+0xd0>
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_TIM_PWM_Start+0xd2>
 8002278:	2300      	movs	r3, #0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d007      	beq.n	800228e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800228c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a22      	ldr	r2, [pc, #136]	; (800231c <HAL_TIM_PWM_Start+0x174>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d022      	beq.n	80022de <HAL_TIM_PWM_Start+0x136>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a0:	d01d      	beq.n	80022de <HAL_TIM_PWM_Start+0x136>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a1f      	ldr	r2, [pc, #124]	; (8002324 <HAL_TIM_PWM_Start+0x17c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d018      	beq.n	80022de <HAL_TIM_PWM_Start+0x136>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <HAL_TIM_PWM_Start+0x180>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d013      	beq.n	80022de <HAL_TIM_PWM_Start+0x136>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a1c      	ldr	r2, [pc, #112]	; (800232c <HAL_TIM_PWM_Start+0x184>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d00e      	beq.n	80022de <HAL_TIM_PWM_Start+0x136>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a16      	ldr	r2, [pc, #88]	; (8002320 <HAL_TIM_PWM_Start+0x178>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d009      	beq.n	80022de <HAL_TIM_PWM_Start+0x136>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a18      	ldr	r2, [pc, #96]	; (8002330 <HAL_TIM_PWM_Start+0x188>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d004      	beq.n	80022de <HAL_TIM_PWM_Start+0x136>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a16      	ldr	r2, [pc, #88]	; (8002334 <HAL_TIM_PWM_Start+0x18c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d111      	bne.n	8002302 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b06      	cmp	r3, #6
 80022ee:	d010      	beq.n	8002312 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002300:	e007      	b.n	8002312 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0201 	orr.w	r2, r2, #1
 8002310:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40010000 	.word	0x40010000
 8002320:	40010400 	.word	0x40010400
 8002324:	40000400 	.word	0x40000400
 8002328:	40000800 	.word	0x40000800
 800232c:	40000c00 	.word	0x40000c00
 8002330:	40014000 	.word	0x40014000
 8002334:	40001800 	.word	0x40001800

08002338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b02      	cmp	r3, #2
 800234c:	d122      	bne.n	8002394 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b02      	cmp	r3, #2
 800235a:	d11b      	bne.n	8002394 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 0202 	mvn.w	r2, #2
 8002364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fa77 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 8002380:	e005      	b.n	800238e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fa69 	bl	800285a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 fa7a 	bl	8002882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d122      	bne.n	80023e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d11b      	bne.n	80023e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f06f 0204 	mvn.w	r2, #4
 80023b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2202      	movs	r2, #2
 80023be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 fa4d 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 80023d4:	e005      	b.n	80023e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fa3f 	bl	800285a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 fa50 	bl	8002882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d122      	bne.n	800243c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b08      	cmp	r3, #8
 8002402:	d11b      	bne.n	800243c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0208 	mvn.w	r2, #8
 800240c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2204      	movs	r2, #4
 8002412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fa23 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 8002428:	e005      	b.n	8002436 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fa15 	bl	800285a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 fa26 	bl	8002882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	2b10      	cmp	r3, #16
 8002448:	d122      	bne.n	8002490 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b10      	cmp	r3, #16
 8002456:	d11b      	bne.n	8002490 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0210 	mvn.w	r2, #16
 8002460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2208      	movs	r2, #8
 8002466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f9f9 	bl	800286e <HAL_TIM_IC_CaptureCallback>
 800247c:	e005      	b.n	800248a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f9eb 	bl	800285a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f9fc 	bl	8002882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b01      	cmp	r3, #1
 800249c:	d10e      	bne.n	80024bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d107      	bne.n	80024bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0201 	mvn.w	r2, #1
 80024b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe f894 	bl	80005e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c6:	2b80      	cmp	r3, #128	; 0x80
 80024c8:	d10e      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d4:	2b80      	cmp	r3, #128	; 0x80
 80024d6:	d107      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fe84 	bl	80031f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	2b40      	cmp	r3, #64	; 0x40
 80024f4:	d10e      	bne.n	8002514 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002500:	2b40      	cmp	r3, #64	; 0x40
 8002502:	d107      	bne.n	8002514 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800250c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f9c1 	bl	8002896 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b20      	cmp	r3, #32
 8002520:	d10e      	bne.n	8002540 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b20      	cmp	r3, #32
 800252e:	d107      	bne.n	8002540 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0220 	mvn.w	r2, #32
 8002538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 fe4e 	bl	80031dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002562:	2302      	movs	r3, #2
 8002564:	e0ae      	b.n	80026c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b0c      	cmp	r3, #12
 8002572:	f200 809f 	bhi.w	80026b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002576:	a201      	add	r2, pc, #4	; (adr r2, 800257c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257c:	080025b1 	.word	0x080025b1
 8002580:	080026b5 	.word	0x080026b5
 8002584:	080026b5 	.word	0x080026b5
 8002588:	080026b5 	.word	0x080026b5
 800258c:	080025f1 	.word	0x080025f1
 8002590:	080026b5 	.word	0x080026b5
 8002594:	080026b5 	.word	0x080026b5
 8002598:	080026b5 	.word	0x080026b5
 800259c:	08002633 	.word	0x08002633
 80025a0:	080026b5 	.word	0x080026b5
 80025a4:	080026b5 	.word	0x080026b5
 80025a8:	080026b5 	.word	0x080026b5
 80025ac:	08002673 	.word	0x08002673
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fa18 	bl	80029ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0208 	orr.w	r2, r2, #8
 80025ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699a      	ldr	r2, [r3, #24]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0204 	bic.w	r2, r2, #4
 80025da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6999      	ldr	r1, [r3, #24]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	619a      	str	r2, [r3, #24]
      break;
 80025ee:	e064      	b.n	80026ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fa68 	bl	8002acc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800260a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800261a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6999      	ldr	r1, [r3, #24]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	021a      	lsls	r2, r3, #8
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	619a      	str	r2, [r3, #24]
      break;
 8002630:	e043      	b.n	80026ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68b9      	ldr	r1, [r7, #8]
 8002638:	4618      	mov	r0, r3
 800263a:	f000 fabd 	bl	8002bb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69da      	ldr	r2, [r3, #28]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0208 	orr.w	r2, r2, #8
 800264c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0204 	bic.w	r2, r2, #4
 800265c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69d9      	ldr	r1, [r3, #28]
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	61da      	str	r2, [r3, #28]
      break;
 8002670:	e023      	b.n	80026ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	4618      	mov	r0, r3
 800267a:	f000 fb11 	bl	8002ca0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69da      	ldr	r2, [r3, #28]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800268c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69da      	ldr	r2, [r3, #28]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800269c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69d9      	ldr	r1, [r3, #28]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	021a      	lsls	r2, r3, #8
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	61da      	str	r2, [r3, #28]
      break;
 80026b2:	e002      	b.n	80026ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	75fb      	strb	r3, [r7, #23]
      break;
 80026b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d101      	bne.n	80026e8 <HAL_TIM_ConfigClockSource+0x1c>
 80026e4:	2302      	movs	r3, #2
 80026e6:	e0b4      	b.n	8002852 <HAL_TIM_ConfigClockSource+0x186>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800270e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002720:	d03e      	beq.n	80027a0 <HAL_TIM_ConfigClockSource+0xd4>
 8002722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002726:	f200 8087 	bhi.w	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 800272a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800272e:	f000 8086 	beq.w	800283e <HAL_TIM_ConfigClockSource+0x172>
 8002732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002736:	d87f      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 8002738:	2b70      	cmp	r3, #112	; 0x70
 800273a:	d01a      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0xa6>
 800273c:	2b70      	cmp	r3, #112	; 0x70
 800273e:	d87b      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	2b60      	cmp	r3, #96	; 0x60
 8002742:	d050      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0x11a>
 8002744:	2b60      	cmp	r3, #96	; 0x60
 8002746:	d877      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 8002748:	2b50      	cmp	r3, #80	; 0x50
 800274a:	d03c      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0xfa>
 800274c:	2b50      	cmp	r3, #80	; 0x50
 800274e:	d873      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 8002750:	2b40      	cmp	r3, #64	; 0x40
 8002752:	d058      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x13a>
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	d86f      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 8002758:	2b30      	cmp	r3, #48	; 0x30
 800275a:	d064      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x15a>
 800275c:	2b30      	cmp	r3, #48	; 0x30
 800275e:	d86b      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 8002760:	2b20      	cmp	r3, #32
 8002762:	d060      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x15a>
 8002764:	2b20      	cmp	r3, #32
 8002766:	d867      	bhi.n	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 8002768:	2b00      	cmp	r3, #0
 800276a:	d05c      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x15a>
 800276c:	2b10      	cmp	r3, #16
 800276e:	d05a      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x15a>
 8002770:	e062      	b.n	8002838 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6899      	ldr	r1, [r3, #8]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f000 fb5d 	bl	8002e40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002794:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	609a      	str	r2, [r3, #8]
      break;
 800279e:	e04f      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	6899      	ldr	r1, [r3, #8]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f000 fb46 	bl	8002e40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027c2:	609a      	str	r2, [r3, #8]
      break;
 80027c4:	e03c      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6859      	ldr	r1, [r3, #4]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	461a      	mov	r2, r3
 80027d4:	f000 faba 	bl	8002d4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2150      	movs	r1, #80	; 0x50
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fb13 	bl	8002e0a <TIM_ITRx_SetConfig>
      break;
 80027e4:	e02c      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6859      	ldr	r1, [r3, #4]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f000 fad9 	bl	8002daa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2160      	movs	r1, #96	; 0x60
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 fb03 	bl	8002e0a <TIM_ITRx_SetConfig>
      break;
 8002804:	e01c      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6859      	ldr	r1, [r3, #4]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	461a      	mov	r2, r3
 8002814:	f000 fa9a 	bl	8002d4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2140      	movs	r1, #64	; 0x40
 800281e:	4618      	mov	r0, r3
 8002820:	f000 faf3 	bl	8002e0a <TIM_ITRx_SetConfig>
      break;
 8002824:	e00c      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4619      	mov	r1, r3
 8002830:	4610      	mov	r0, r2
 8002832:	f000 faea 	bl	8002e0a <TIM_ITRx_SetConfig>
      break;
 8002836:	e003      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
      break;
 800283c:	e000      	b.n	8002840 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800283e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002850:	7bfb      	ldrb	r3, [r7, #15]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a40      	ldr	r2, [pc, #256]	; (80029c0 <TIM_Base_SetConfig+0x114>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d013      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ca:	d00f      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a3d      	ldr	r2, [pc, #244]	; (80029c4 <TIM_Base_SetConfig+0x118>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00b      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a3c      	ldr	r2, [pc, #240]	; (80029c8 <TIM_Base_SetConfig+0x11c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d007      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a3b      	ldr	r2, [pc, #236]	; (80029cc <TIM_Base_SetConfig+0x120>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d003      	beq.n	80028ec <TIM_Base_SetConfig+0x40>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a3a      	ldr	r2, [pc, #232]	; (80029d0 <TIM_Base_SetConfig+0x124>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d108      	bne.n	80028fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a2f      	ldr	r2, [pc, #188]	; (80029c0 <TIM_Base_SetConfig+0x114>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d02b      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290c:	d027      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a2c      	ldr	r2, [pc, #176]	; (80029c4 <TIM_Base_SetConfig+0x118>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d023      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a2b      	ldr	r2, [pc, #172]	; (80029c8 <TIM_Base_SetConfig+0x11c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d01f      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a2a      	ldr	r2, [pc, #168]	; (80029cc <TIM_Base_SetConfig+0x120>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01b      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a29      	ldr	r2, [pc, #164]	; (80029d0 <TIM_Base_SetConfig+0x124>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d017      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a28      	ldr	r2, [pc, #160]	; (80029d4 <TIM_Base_SetConfig+0x128>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a27      	ldr	r2, [pc, #156]	; (80029d8 <TIM_Base_SetConfig+0x12c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00f      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a26      	ldr	r2, [pc, #152]	; (80029dc <TIM_Base_SetConfig+0x130>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00b      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a25      	ldr	r2, [pc, #148]	; (80029e0 <TIM_Base_SetConfig+0x134>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a24      	ldr	r2, [pc, #144]	; (80029e4 <TIM_Base_SetConfig+0x138>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d003      	beq.n	800295e <TIM_Base_SetConfig+0xb2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <TIM_Base_SetConfig+0x13c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d108      	bne.n	8002970 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <TIM_Base_SetConfig+0x114>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d003      	beq.n	80029a4 <TIM_Base_SetConfig+0xf8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a0c      	ldr	r2, [pc, #48]	; (80029d0 <TIM_Base_SetConfig+0x124>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d103      	bne.n	80029ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	615a      	str	r2, [r3, #20]
}
 80029b2:	bf00      	nop
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40010000 	.word	0x40010000
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40000800 	.word	0x40000800
 80029cc:	40000c00 	.word	0x40000c00
 80029d0:	40010400 	.word	0x40010400
 80029d4:	40014000 	.word	0x40014000
 80029d8:	40014400 	.word	0x40014400
 80029dc:	40014800 	.word	0x40014800
 80029e0:	40001800 	.word	0x40001800
 80029e4:	40001c00 	.word	0x40001c00
 80029e8:	40002000 	.word	0x40002000

080029ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	f023 0201 	bic.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0303 	bic.w	r3, r3, #3
 8002a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f023 0302 	bic.w	r3, r3, #2
 8002a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a20      	ldr	r2, [pc, #128]	; (8002ac4 <TIM_OC1_SetConfig+0xd8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d003      	beq.n	8002a50 <TIM_OC1_SetConfig+0x64>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a1f      	ldr	r2, [pc, #124]	; (8002ac8 <TIM_OC1_SetConfig+0xdc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d10c      	bne.n	8002a6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f023 0308 	bic.w	r3, r3, #8
 8002a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f023 0304 	bic.w	r3, r3, #4
 8002a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a15      	ldr	r2, [pc, #84]	; (8002ac4 <TIM_OC1_SetConfig+0xd8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d003      	beq.n	8002a7a <TIM_OC1_SetConfig+0x8e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <TIM_OC1_SetConfig+0xdc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d111      	bne.n	8002a9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	621a      	str	r2, [r3, #32]
}
 8002ab8:	bf00      	nop
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	40010000 	.word	0x40010000
 8002ac8:	40010400 	.word	0x40010400

08002acc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	f023 0210 	bic.w	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f023 0320 	bic.w	r3, r3, #32
 8002b16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <TIM_OC2_SetConfig+0xe4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d003      	beq.n	8002b34 <TIM_OC2_SetConfig+0x68>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a21      	ldr	r2, [pc, #132]	; (8002bb4 <TIM_OC2_SetConfig+0xe8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d10d      	bne.n	8002b50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <TIM_OC2_SetConfig+0xe4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d003      	beq.n	8002b60 <TIM_OC2_SetConfig+0x94>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a16      	ldr	r2, [pc, #88]	; (8002bb4 <TIM_OC2_SetConfig+0xe8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d113      	bne.n	8002b88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	621a      	str	r2, [r3, #32]
}
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40010000 	.word	0x40010000
 8002bb4:	40010400 	.word	0x40010400

08002bb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0303 	bic.w	r3, r3, #3
 8002bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a21      	ldr	r2, [pc, #132]	; (8002c98 <TIM_OC3_SetConfig+0xe0>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d003      	beq.n	8002c1e <TIM_OC3_SetConfig+0x66>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a20      	ldr	r2, [pc, #128]	; (8002c9c <TIM_OC3_SetConfig+0xe4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d10d      	bne.n	8002c3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	021b      	lsls	r3, r3, #8
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a16      	ldr	r2, [pc, #88]	; (8002c98 <TIM_OC3_SetConfig+0xe0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d003      	beq.n	8002c4a <TIM_OC3_SetConfig+0x92>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a15      	ldr	r2, [pc, #84]	; (8002c9c <TIM_OC3_SetConfig+0xe4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d113      	bne.n	8002c72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	621a      	str	r2, [r3, #32]
}
 8002c8c:	bf00      	nop
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	40010400 	.word	0x40010400

08002ca0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	031b      	lsls	r3, r3, #12
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <TIM_OC4_SetConfig+0xa4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d003      	beq.n	8002d08 <TIM_OC4_SetConfig+0x68>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a11      	ldr	r2, [pc, #68]	; (8002d48 <TIM_OC4_SetConfig+0xa8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d109      	bne.n	8002d1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	019b      	lsls	r3, r3, #6
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	621a      	str	r2, [r3, #32]
}
 8002d36:	bf00      	nop
 8002d38:	371c      	adds	r7, #28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40010000 	.word	0x40010000
 8002d48:	40010400 	.word	0x40010400

08002d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f023 0201 	bic.w	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f023 030a 	bic.w	r3, r3, #10
 8002d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	621a      	str	r2, [r3, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b087      	sub	sp, #28
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	f023 0210 	bic.w	r2, r3, #16
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	031b      	lsls	r3, r3, #12
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002de6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	621a      	str	r2, [r3, #32]
}
 8002dfe:	bf00      	nop
 8002e00:	371c      	adds	r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b085      	sub	sp, #20
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f043 0307 	orr.w	r3, r3, #7
 8002e2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	609a      	str	r2, [r3, #8]
}
 8002e34:	bf00      	nop
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	021a      	lsls	r2, r3, #8
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	609a      	str	r2, [r3, #8]
}
 8002e74:	bf00      	nop
 8002e76:	371c      	adds	r7, #28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	2201      	movs	r2, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a1a      	ldr	r2, [r3, #32]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a1a      	ldr	r2, [r3, #32]
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f003 031f 	and.w	r3, r3, #31
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	621a      	str	r2, [r3, #32]
}
 8002ebe:	bf00      	nop
 8002ec0:	371c      	adds	r7, #28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d109      	bne.n	8002ef0 <HAL_TIMEx_PWMN_Start+0x24>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	bf14      	ite	ne
 8002ee8:	2301      	movne	r3, #1
 8002eea:	2300      	moveq	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	e022      	b.n	8002f36 <HAL_TIMEx_PWMN_Start+0x6a>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d109      	bne.n	8002f0a <HAL_TIMEx_PWMN_Start+0x3e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	bf14      	ite	ne
 8002f02:	2301      	movne	r3, #1
 8002f04:	2300      	moveq	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	e015      	b.n	8002f36 <HAL_TIMEx_PWMN_Start+0x6a>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d109      	bne.n	8002f24 <HAL_TIMEx_PWMN_Start+0x58>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	bf14      	ite	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	2300      	moveq	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e008      	b.n	8002f36 <HAL_TIMEx_PWMN_Start+0x6a>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	bf14      	ite	ne
 8002f30:	2301      	movne	r3, #1
 8002f32:	2300      	moveq	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e06d      	b.n	800301a <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d104      	bne.n	8002f4e <HAL_TIMEx_PWMN_Start+0x82>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f4c:	e013      	b.n	8002f76 <HAL_TIMEx_PWMN_Start+0xaa>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d104      	bne.n	8002f5e <HAL_TIMEx_PWMN_Start+0x92>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f5c:	e00b      	b.n	8002f76 <HAL_TIMEx_PWMN_Start+0xaa>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d104      	bne.n	8002f6e <HAL_TIMEx_PWMN_Start+0xa2>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f6c:	e003      	b.n	8002f76 <HAL_TIMEx_PWMN_Start+0xaa>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2202      	movs	r2, #2
 8002f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	6839      	ldr	r1, [r7, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 f940 	bl	8003204 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f92:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a22      	ldr	r2, [pc, #136]	; (8003024 <HAL_TIMEx_PWMN_Start+0x158>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d022      	beq.n	8002fe4 <HAL_TIMEx_PWMN_Start+0x118>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa6:	d01d      	beq.n	8002fe4 <HAL_TIMEx_PWMN_Start+0x118>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1e      	ldr	r2, [pc, #120]	; (8003028 <HAL_TIMEx_PWMN_Start+0x15c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d018      	beq.n	8002fe4 <HAL_TIMEx_PWMN_Start+0x118>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a1d      	ldr	r2, [pc, #116]	; (800302c <HAL_TIMEx_PWMN_Start+0x160>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d013      	beq.n	8002fe4 <HAL_TIMEx_PWMN_Start+0x118>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1b      	ldr	r2, [pc, #108]	; (8003030 <HAL_TIMEx_PWMN_Start+0x164>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00e      	beq.n	8002fe4 <HAL_TIMEx_PWMN_Start+0x118>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1a      	ldr	r2, [pc, #104]	; (8003034 <HAL_TIMEx_PWMN_Start+0x168>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d009      	beq.n	8002fe4 <HAL_TIMEx_PWMN_Start+0x118>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a18      	ldr	r2, [pc, #96]	; (8003038 <HAL_TIMEx_PWMN_Start+0x16c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d004      	beq.n	8002fe4 <HAL_TIMEx_PWMN_Start+0x118>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a17      	ldr	r2, [pc, #92]	; (800303c <HAL_TIMEx_PWMN_Start+0x170>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d111      	bne.n	8003008 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b06      	cmp	r3, #6
 8002ff4:	d010      	beq.n	8003018 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0201 	orr.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003006:	e007      	b.n	8003018 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40010000 	.word	0x40010000
 8003028:	40000400 	.word	0x40000400
 800302c:	40000800 	.word	0x40000800
 8003030:	40000c00 	.word	0x40000c00
 8003034:	40010400 	.word	0x40010400
 8003038:	40014000 	.word	0x40014000
 800303c:	40001800 	.word	0x40001800

08003040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003054:	2302      	movs	r3, #2
 8003056:	e05a      	b.n	800310e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a21      	ldr	r2, [pc, #132]	; (800311c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d022      	beq.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a4:	d01d      	beq.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1d      	ldr	r2, [pc, #116]	; (8003120 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d018      	beq.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1b      	ldr	r2, [pc, #108]	; (8003124 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1a      	ldr	r2, [pc, #104]	; (8003128 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00e      	beq.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a18      	ldr	r2, [pc, #96]	; (800312c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d009      	beq.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a17      	ldr	r2, [pc, #92]	; (8003130 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d004      	beq.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a15      	ldr	r2, [pc, #84]	; (8003134 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d10c      	bne.n	80030fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40010000 	.word	0x40010000
 8003120:	40000400 	.word	0x40000400
 8003124:	40000800 	.word	0x40000800
 8003128:	40000c00 	.word	0x40000c00
 800312c:	40010400 	.word	0x40010400
 8003130:	40014000 	.word	0x40014000
 8003134:	40001800 	.word	0x40001800

08003138 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003150:	2302      	movs	r3, #2
 8003152:	e03d      	b.n	80031d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f003 031f 	and.w	r3, r3, #31
 8003216:	2204      	movs	r2, #4
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a1a      	ldr	r2, [r3, #32]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	43db      	mvns	r3, r3
 8003226:	401a      	ands	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a1a      	ldr	r2, [r3, #32]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 031f 	and.w	r3, r3, #31
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	fa01 f303 	lsl.w	r3, r1, r3
 800323c:	431a      	orrs	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	621a      	str	r2, [r3, #32]
}
 8003242:	bf00      	nop
 8003244:	371c      	adds	r7, #28
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e03f      	b.n	80032e0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d106      	bne.n	800327a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7fd fcf1 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2224      	movs	r2, #36	; 0x24
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003290:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f828 	bl	80032e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691a      	ldr	r2, [r3, #16]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032b6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032c6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ec:	b0c0      	sub	sp, #256	; 0x100
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003304:	68d9      	ldr	r1, [r3, #12]
 8003306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	ea40 0301 	orr.w	r3, r0, r1
 8003310:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	431a      	orrs	r2, r3
 8003320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	431a      	orrs	r2, r3
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003340:	f021 010c 	bic.w	r1, r1, #12
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800334e:	430b      	orrs	r3, r1
 8003350:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800335e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003362:	6999      	ldr	r1, [r3, #24]
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	ea40 0301 	orr.w	r3, r0, r1
 800336e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4b8f      	ldr	r3, [pc, #572]	; (80035b4 <UART_SetConfig+0x2cc>)
 8003378:	429a      	cmp	r2, r3
 800337a:	d005      	beq.n	8003388 <UART_SetConfig+0xa0>
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4b8d      	ldr	r3, [pc, #564]	; (80035b8 <UART_SetConfig+0x2d0>)
 8003384:	429a      	cmp	r2, r3
 8003386:	d104      	bne.n	8003392 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003388:	f7fe f912 	bl	80015b0 <HAL_RCC_GetPCLK2Freq>
 800338c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003390:	e003      	b.n	800339a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003392:	f7fe f8f9 	bl	8001588 <HAL_RCC_GetPCLK1Freq>
 8003396:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800339a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a4:	f040 810c 	bne.w	80035c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ac:	2200      	movs	r2, #0
 80033ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80033ba:	4622      	mov	r2, r4
 80033bc:	462b      	mov	r3, r5
 80033be:	1891      	adds	r1, r2, r2
 80033c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80033c2:	415b      	adcs	r3, r3
 80033c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033ca:	4621      	mov	r1, r4
 80033cc:	eb12 0801 	adds.w	r8, r2, r1
 80033d0:	4629      	mov	r1, r5
 80033d2:	eb43 0901 	adc.w	r9, r3, r1
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ea:	4690      	mov	r8, r2
 80033ec:	4699      	mov	r9, r3
 80033ee:	4623      	mov	r3, r4
 80033f0:	eb18 0303 	adds.w	r3, r8, r3
 80033f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033f8:	462b      	mov	r3, r5
 80033fa:	eb49 0303 	adc.w	r3, r9, r3
 80033fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800340e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003412:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003416:	460b      	mov	r3, r1
 8003418:	18db      	adds	r3, r3, r3
 800341a:	653b      	str	r3, [r7, #80]	; 0x50
 800341c:	4613      	mov	r3, r2
 800341e:	eb42 0303 	adc.w	r3, r2, r3
 8003422:	657b      	str	r3, [r7, #84]	; 0x54
 8003424:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003428:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800342c:	f7fc feea 	bl	8000204 <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4b61      	ldr	r3, [pc, #388]	; (80035bc <UART_SetConfig+0x2d4>)
 8003436:	fba3 2302 	umull	r2, r3, r3, r2
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	011c      	lsls	r4, r3, #4
 800343e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003442:	2200      	movs	r2, #0
 8003444:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003448:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800344c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003450:	4642      	mov	r2, r8
 8003452:	464b      	mov	r3, r9
 8003454:	1891      	adds	r1, r2, r2
 8003456:	64b9      	str	r1, [r7, #72]	; 0x48
 8003458:	415b      	adcs	r3, r3
 800345a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800345c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003460:	4641      	mov	r1, r8
 8003462:	eb12 0a01 	adds.w	sl, r2, r1
 8003466:	4649      	mov	r1, r9
 8003468:	eb43 0b01 	adc.w	fp, r3, r1
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003478:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800347c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003480:	4692      	mov	sl, r2
 8003482:	469b      	mov	fp, r3
 8003484:	4643      	mov	r3, r8
 8003486:	eb1a 0303 	adds.w	r3, sl, r3
 800348a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800348e:	464b      	mov	r3, r9
 8003490:	eb4b 0303 	adc.w	r3, fp, r3
 8003494:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034ac:	460b      	mov	r3, r1
 80034ae:	18db      	adds	r3, r3, r3
 80034b0:	643b      	str	r3, [r7, #64]	; 0x40
 80034b2:	4613      	mov	r3, r2
 80034b4:	eb42 0303 	adc.w	r3, r2, r3
 80034b8:	647b      	str	r3, [r7, #68]	; 0x44
 80034ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034c2:	f7fc fe9f 	bl	8000204 <__aeabi_uldivmod>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4611      	mov	r1, r2
 80034cc:	4b3b      	ldr	r3, [pc, #236]	; (80035bc <UART_SetConfig+0x2d4>)
 80034ce:	fba3 2301 	umull	r2, r3, r3, r1
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2264      	movs	r2, #100	; 0x64
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	1acb      	subs	r3, r1, r3
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034e2:	4b36      	ldr	r3, [pc, #216]	; (80035bc <UART_SetConfig+0x2d4>)
 80034e4:	fba3 2302 	umull	r2, r3, r3, r2
 80034e8:	095b      	lsrs	r3, r3, #5
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034f0:	441c      	add	r4, r3
 80034f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f6:	2200      	movs	r2, #0
 80034f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003500:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003504:	4642      	mov	r2, r8
 8003506:	464b      	mov	r3, r9
 8003508:	1891      	adds	r1, r2, r2
 800350a:	63b9      	str	r1, [r7, #56]	; 0x38
 800350c:	415b      	adcs	r3, r3
 800350e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003510:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003514:	4641      	mov	r1, r8
 8003516:	1851      	adds	r1, r2, r1
 8003518:	6339      	str	r1, [r7, #48]	; 0x30
 800351a:	4649      	mov	r1, r9
 800351c:	414b      	adcs	r3, r1
 800351e:	637b      	str	r3, [r7, #52]	; 0x34
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800352c:	4659      	mov	r1, fp
 800352e:	00cb      	lsls	r3, r1, #3
 8003530:	4651      	mov	r1, sl
 8003532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003536:	4651      	mov	r1, sl
 8003538:	00ca      	lsls	r2, r1, #3
 800353a:	4610      	mov	r0, r2
 800353c:	4619      	mov	r1, r3
 800353e:	4603      	mov	r3, r0
 8003540:	4642      	mov	r2, r8
 8003542:	189b      	adds	r3, r3, r2
 8003544:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003548:	464b      	mov	r3, r9
 800354a:	460a      	mov	r2, r1
 800354c:	eb42 0303 	adc.w	r3, r2, r3
 8003550:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003560:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003564:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003568:	460b      	mov	r3, r1
 800356a:	18db      	adds	r3, r3, r3
 800356c:	62bb      	str	r3, [r7, #40]	; 0x28
 800356e:	4613      	mov	r3, r2
 8003570:	eb42 0303 	adc.w	r3, r2, r3
 8003574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003576:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800357a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800357e:	f7fc fe41 	bl	8000204 <__aeabi_uldivmod>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <UART_SetConfig+0x2d4>)
 8003588:	fba3 1302 	umull	r1, r3, r3, r2
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	2164      	movs	r1, #100	; 0x64
 8003590:	fb01 f303 	mul.w	r3, r1, r3
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	3332      	adds	r3, #50	; 0x32
 800359a:	4a08      	ldr	r2, [pc, #32]	; (80035bc <UART_SetConfig+0x2d4>)
 800359c:	fba2 2303 	umull	r2, r3, r2, r3
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	f003 0207 	and.w	r2, r3, #7
 80035a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4422      	add	r2, r4
 80035ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035b0:	e105      	b.n	80037be <UART_SetConfig+0x4d6>
 80035b2:	bf00      	nop
 80035b4:	40011000 	.word	0x40011000
 80035b8:	40011400 	.word	0x40011400
 80035bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035c4:	2200      	movs	r2, #0
 80035c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80035d2:	4642      	mov	r2, r8
 80035d4:	464b      	mov	r3, r9
 80035d6:	1891      	adds	r1, r2, r2
 80035d8:	6239      	str	r1, [r7, #32]
 80035da:	415b      	adcs	r3, r3
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
 80035de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035e2:	4641      	mov	r1, r8
 80035e4:	1854      	adds	r4, r2, r1
 80035e6:	4649      	mov	r1, r9
 80035e8:	eb43 0501 	adc.w	r5, r3, r1
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	00eb      	lsls	r3, r5, #3
 80035f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035fa:	00e2      	lsls	r2, r4, #3
 80035fc:	4614      	mov	r4, r2
 80035fe:	461d      	mov	r5, r3
 8003600:	4643      	mov	r3, r8
 8003602:	18e3      	adds	r3, r4, r3
 8003604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003608:	464b      	mov	r3, r9
 800360a:	eb45 0303 	adc.w	r3, r5, r3
 800360e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800361e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800362e:	4629      	mov	r1, r5
 8003630:	008b      	lsls	r3, r1, #2
 8003632:	4621      	mov	r1, r4
 8003634:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003638:	4621      	mov	r1, r4
 800363a:	008a      	lsls	r2, r1, #2
 800363c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003640:	f7fc fde0 	bl	8000204 <__aeabi_uldivmod>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4b60      	ldr	r3, [pc, #384]	; (80037cc <UART_SetConfig+0x4e4>)
 800364a:	fba3 2302 	umull	r2, r3, r3, r2
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	011c      	lsls	r4, r3, #4
 8003652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003656:	2200      	movs	r2, #0
 8003658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800365c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003660:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003664:	4642      	mov	r2, r8
 8003666:	464b      	mov	r3, r9
 8003668:	1891      	adds	r1, r2, r2
 800366a:	61b9      	str	r1, [r7, #24]
 800366c:	415b      	adcs	r3, r3
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003674:	4641      	mov	r1, r8
 8003676:	1851      	adds	r1, r2, r1
 8003678:	6139      	str	r1, [r7, #16]
 800367a:	4649      	mov	r1, r9
 800367c:	414b      	adcs	r3, r1
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800368c:	4659      	mov	r1, fp
 800368e:	00cb      	lsls	r3, r1, #3
 8003690:	4651      	mov	r1, sl
 8003692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003696:	4651      	mov	r1, sl
 8003698:	00ca      	lsls	r2, r1, #3
 800369a:	4610      	mov	r0, r2
 800369c:	4619      	mov	r1, r3
 800369e:	4603      	mov	r3, r0
 80036a0:	4642      	mov	r2, r8
 80036a2:	189b      	adds	r3, r3, r2
 80036a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036a8:	464b      	mov	r3, r9
 80036aa:	460a      	mov	r2, r1
 80036ac:	eb42 0303 	adc.w	r3, r2, r3
 80036b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80036be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80036cc:	4649      	mov	r1, r9
 80036ce:	008b      	lsls	r3, r1, #2
 80036d0:	4641      	mov	r1, r8
 80036d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036d6:	4641      	mov	r1, r8
 80036d8:	008a      	lsls	r2, r1, #2
 80036da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036de:	f7fc fd91 	bl	8000204 <__aeabi_uldivmod>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4b39      	ldr	r3, [pc, #228]	; (80037cc <UART_SetConfig+0x4e4>)
 80036e8:	fba3 1302 	umull	r1, r3, r3, r2
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	2164      	movs	r1, #100	; 0x64
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	3332      	adds	r3, #50	; 0x32
 80036fa:	4a34      	ldr	r2, [pc, #208]	; (80037cc <UART_SetConfig+0x4e4>)
 80036fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003700:	095b      	lsrs	r3, r3, #5
 8003702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003706:	441c      	add	r4, r3
 8003708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800370c:	2200      	movs	r2, #0
 800370e:	673b      	str	r3, [r7, #112]	; 0x70
 8003710:	677a      	str	r2, [r7, #116]	; 0x74
 8003712:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003716:	4642      	mov	r2, r8
 8003718:	464b      	mov	r3, r9
 800371a:	1891      	adds	r1, r2, r2
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	415b      	adcs	r3, r3
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003726:	4641      	mov	r1, r8
 8003728:	1851      	adds	r1, r2, r1
 800372a:	6039      	str	r1, [r7, #0]
 800372c:	4649      	mov	r1, r9
 800372e:	414b      	adcs	r3, r1
 8003730:	607b      	str	r3, [r7, #4]
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800373e:	4659      	mov	r1, fp
 8003740:	00cb      	lsls	r3, r1, #3
 8003742:	4651      	mov	r1, sl
 8003744:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003748:	4651      	mov	r1, sl
 800374a:	00ca      	lsls	r2, r1, #3
 800374c:	4610      	mov	r0, r2
 800374e:	4619      	mov	r1, r3
 8003750:	4603      	mov	r3, r0
 8003752:	4642      	mov	r2, r8
 8003754:	189b      	adds	r3, r3, r2
 8003756:	66bb      	str	r3, [r7, #104]	; 0x68
 8003758:	464b      	mov	r3, r9
 800375a:	460a      	mov	r2, r1
 800375c:	eb42 0303 	adc.w	r3, r2, r3
 8003760:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	663b      	str	r3, [r7, #96]	; 0x60
 800376c:	667a      	str	r2, [r7, #100]	; 0x64
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800377a:	4649      	mov	r1, r9
 800377c:	008b      	lsls	r3, r1, #2
 800377e:	4641      	mov	r1, r8
 8003780:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003784:	4641      	mov	r1, r8
 8003786:	008a      	lsls	r2, r1, #2
 8003788:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800378c:	f7fc fd3a 	bl	8000204 <__aeabi_uldivmod>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <UART_SetConfig+0x4e4>)
 8003796:	fba3 1302 	umull	r1, r3, r3, r2
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2164      	movs	r1, #100	; 0x64
 800379e:	fb01 f303 	mul.w	r3, r1, r3
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	3332      	adds	r3, #50	; 0x32
 80037a8:	4a08      	ldr	r2, [pc, #32]	; (80037cc <UART_SetConfig+0x4e4>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	f003 020f 	and.w	r2, r3, #15
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4422      	add	r2, r4
 80037bc:	609a      	str	r2, [r3, #8]
}
 80037be:	bf00      	nop
 80037c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037c4:	46bd      	mov	sp, r7
 80037c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ca:	bf00      	nop
 80037cc:	51eb851f 	.word	0x51eb851f

080037d0 <__libc_init_array>:
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	4d0d      	ldr	r5, [pc, #52]	; (8003808 <__libc_init_array+0x38>)
 80037d4:	4c0d      	ldr	r4, [pc, #52]	; (800380c <__libc_init_array+0x3c>)
 80037d6:	1b64      	subs	r4, r4, r5
 80037d8:	10a4      	asrs	r4, r4, #2
 80037da:	2600      	movs	r6, #0
 80037dc:	42a6      	cmp	r6, r4
 80037de:	d109      	bne.n	80037f4 <__libc_init_array+0x24>
 80037e0:	4d0b      	ldr	r5, [pc, #44]	; (8003810 <__libc_init_array+0x40>)
 80037e2:	4c0c      	ldr	r4, [pc, #48]	; (8003814 <__libc_init_array+0x44>)
 80037e4:	f000 f820 	bl	8003828 <_init>
 80037e8:	1b64      	subs	r4, r4, r5
 80037ea:	10a4      	asrs	r4, r4, #2
 80037ec:	2600      	movs	r6, #0
 80037ee:	42a6      	cmp	r6, r4
 80037f0:	d105      	bne.n	80037fe <__libc_init_array+0x2e>
 80037f2:	bd70      	pop	{r4, r5, r6, pc}
 80037f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f8:	4798      	blx	r3
 80037fa:	3601      	adds	r6, #1
 80037fc:	e7ee      	b.n	80037dc <__libc_init_array+0xc>
 80037fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003802:	4798      	blx	r3
 8003804:	3601      	adds	r6, #1
 8003806:	e7f2      	b.n	80037ee <__libc_init_array+0x1e>
 8003808:	08003860 	.word	0x08003860
 800380c:	08003860 	.word	0x08003860
 8003810:	08003860 	.word	0x08003860
 8003814:	08003864 	.word	0x08003864

08003818 <memset>:
 8003818:	4402      	add	r2, r0
 800381a:	4603      	mov	r3, r0
 800381c:	4293      	cmp	r3, r2
 800381e:	d100      	bne.n	8003822 <memset+0xa>
 8003820:	4770      	bx	lr
 8003822:	f803 1b01 	strb.w	r1, [r3], #1
 8003826:	e7f9      	b.n	800381c <memset+0x4>

08003828 <_init>:
 8003828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382a:	bf00      	nop
 800382c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382e:	bc08      	pop	{r3}
 8003830:	469e      	mov	lr, r3
 8003832:	4770      	bx	lr

08003834 <_fini>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	bf00      	nop
 8003838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383a:	bc08      	pop	{r3}
 800383c:	469e      	mov	lr, r3
 800383e:	4770      	bx	lr
