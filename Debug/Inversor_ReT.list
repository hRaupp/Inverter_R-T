
Inversor_ReT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e10  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000150c  08004fd4  08004fd4  00014fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064e0  080064e0  00020404  2**0
                  CONTENTS
  4 .ARM          00000008  080064e0  080064e0  000164e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064e8  080064e8  00020404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064e8  080064e8  000164e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064ec  080064ec  000164ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  080064f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f0  20000404  080068f4  00020404  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009f4  080068f4  000209f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bb6  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d6  00000000  00000000  00032fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  000357c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00036830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022dbf  00000000  00000000  000377b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015136  00000000  00000000  0005a56f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3077  00000000  00000000  0006f6a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014271c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044f4  00000000  00000000  0014276c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000404 	.word	0x20000404
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004fbc 	.word	0x08004fbc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000408 	.word	0x20000408
 8000200:	08004fbc 	.word	0x08004fbc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	4b3d      	ldr	r3, [pc, #244]	; (8000618 <MX_GPIO_Init+0x110>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a3c      	ldr	r2, [pc, #240]	; (8000618 <MX_GPIO_Init+0x110>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b3a      	ldr	r3, [pc, #232]	; (8000618 <MX_GPIO_Init+0x110>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	4b36      	ldr	r3, [pc, #216]	; (8000618 <MX_GPIO_Init+0x110>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a35      	ldr	r2, [pc, #212]	; (8000618 <MX_GPIO_Init+0x110>)
 8000544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b33      	ldr	r3, [pc, #204]	; (8000618 <MX_GPIO_Init+0x110>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	4b2f      	ldr	r3, [pc, #188]	; (8000618 <MX_GPIO_Init+0x110>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a2e      	ldr	r2, [pc, #184]	; (8000618 <MX_GPIO_Init+0x110>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b2c      	ldr	r3, [pc, #176]	; (8000618 <MX_GPIO_Init+0x110>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	4b28      	ldr	r3, [pc, #160]	; (8000618 <MX_GPIO_Init+0x110>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a27      	ldr	r2, [pc, #156]	; (8000618 <MX_GPIO_Init+0x110>)
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b25      	ldr	r3, [pc, #148]	; (8000618 <MX_GPIO_Init+0x110>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_ON_Pin|LED_BYPASS_Pin|RELE_BYPASS_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2107      	movs	r1, #7
 8000592:	4822      	ldr	r0, [pc, #136]	; (800061c <MX_GPIO_Init+0x114>)
 8000594:	f001 fba2 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2120      	movs	r1, #32
 800059c:	4820      	ldr	r0, [pc, #128]	; (8000620 <MX_GPIO_Init+0x118>)
 800059e:	f001 fb9d 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005a8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	4619      	mov	r1, r3
 80005b8:	4818      	ldr	r0, [pc, #96]	; (800061c <MX_GPIO_Init+0x114>)
 80005ba:	f001 f9e3 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_ON_Pin|LED_BYPASS_Pin|RELE_BYPASS_Pin;
 80005be:	2307      	movs	r3, #7
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4811      	ldr	r0, [pc, #68]	; (800061c <MX_GPIO_Init+0x114>)
 80005d6:	f001 f9d5 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005da:	2320      	movs	r3, #32
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	480b      	ldr	r0, [pc, #44]	; (8000620 <MX_GPIO_Init+0x118>)
 80005f2:	f001 f9c7 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOT1_Pin;
 80005f6:	2301      	movs	r3, #1
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fe:	2302      	movs	r3, #2
 8000600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOT1_GPIO_Port, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_GPIO_Init+0x11c>)
 800060a:	f001 f9bb 	bl	8001984 <HAL_GPIO_Init>

}
 800060e:	bf00      	nop
 8000610:	3728      	adds	r7, #40	; 0x28
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40020800 	.word	0x40020800
 8000620:	40020000 	.word	0x40020000
 8000624:	40020400 	.word	0x40020400

08000628 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_I2C2_Init+0x50>)
 800062e:	4a13      	ldr	r2, [pc, #76]	; (800067c <MX_I2C2_Init+0x54>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_I2C2_Init+0x50>)
 8000634:	4a12      	ldr	r2, [pc, #72]	; (8000680 <MX_I2C2_Init+0x58>)
 8000636:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_I2C2_Init+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_I2C2_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_I2C2_Init+0x50>)
 8000646:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_I2C2_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_I2C2_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MX_I2C2_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_I2C2_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_I2C2_Init+0x50>)
 8000666:	f001 fb53 	bl	8001d10 <HAL_I2C_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000670:	f000 faaa 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000420 	.word	0x20000420
 800067c:	40005800 	.word	0x40005800
 8000680:	00061a80 	.word	0x00061a80

08000684 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a29      	ldr	r2, [pc, #164]	; (8000748 <HAL_I2C_MspInit+0xc4>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d14b      	bne.n	800073e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b28      	ldr	r3, [pc, #160]	; (800074c <HAL_I2C_MspInit+0xc8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a27      	ldr	r2, [pc, #156]	; (800074c <HAL_I2C_MspInit+0xc8>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b25      	ldr	r3, [pc, #148]	; (800074c <HAL_I2C_MspInit+0xc8>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <HAL_I2C_MspInit+0xc8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a20      	ldr	r2, [pc, #128]	; (800074c <HAL_I2C_MspInit+0xc8>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <HAL_I2C_MspInit+0xc8>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006e4:	2312      	movs	r3, #18
 80006e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80006f0:	2304      	movs	r3, #4
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	4619      	mov	r1, r3
 80006fa:	4815      	ldr	r0, [pc, #84]	; (8000750 <HAL_I2C_MspInit+0xcc>)
 80006fc:	f001 f942 	bl	8001984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000706:	2312      	movs	r3, #18
 8000708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000712:	2304      	movs	r3, #4
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	480d      	ldr	r0, [pc, #52]	; (8000754 <HAL_I2C_MspInit+0xd0>)
 800071e:	f001 f931 	bl	8001984 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_I2C_MspInit+0xc8>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <HAL_I2C_MspInit+0xc8>)
 800072c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_I2C_MspInit+0xc8>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	; 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40005800 	.word	0x40005800
 800074c:	40023800 	.word	0x40023800
 8000750:	40020400 	.word	0x40020400
 8000754:	40020800 	.word	0x40020800

08000758 <Desligado>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Desligado(void){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop_IT(&htim10);
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <Desligado+0x38>)
 800075e:	f002 fdcb 	bl	80032f8 <HAL_TIM_Base_Stop_IT>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000762:	2100      	movs	r1, #0
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <Desligado+0x3c>)
 8000766:	f002 ff17 	bl	8003598 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800076a:	2100      	movs	r1, #0
 800076c:	4809      	ldr	r0, [pc, #36]	; (8000794 <Desligado+0x3c>)
 800076e:	f003 ffd3 	bl	8004718 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_1);
 8000772:	2100      	movs	r1, #0
 8000774:	4808      	ldr	r0, [pc, #32]	; (8000798 <Desligado+0x40>)
 8000776:	f003 f8b3 	bl	80038e0 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim4, TIM_CHANNEL_2);
 800077a:	2104      	movs	r1, #4
 800077c:	4806      	ldr	r0, [pc, #24]	; (8000798 <Desligado+0x40>)
 800077e:	f003 f8af 	bl	80038e0 <HAL_TIM_Encoder_Stop>

	HAL_GPIO_WritePin(LED_ON_GPIO_Port, LED_ON_Pin, 0);//Pulsos sendo gerados
 8000782:	2200      	movs	r2, #0
 8000784:	2101      	movs	r1, #1
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <Desligado+0x44>)
 8000788:	f001 faa8 	bl	8001cdc <HAL_GPIO_WritePin>

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2000091c 	.word	0x2000091c
 8000794:	2000088c 	.word	0x2000088c
 8000798:	200008d4 	.word	0x200008d4
 800079c:	40020800 	.word	0x40020800

080007a0 <Ligado>:

void Ligado(void){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim10);
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <Ligado+0x38>)
 80007a6:	f002 fd37 	bl	8003218 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007aa:	2100      	movs	r1, #0
 80007ac:	480b      	ldr	r0, [pc, #44]	; (80007dc <Ligado+0x3c>)
 80007ae:	f002 fe2b 	bl	8003408 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80007b2:	2100      	movs	r1, #0
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <Ligado+0x3c>)
 80007b6:	f003 fef5 	bl	80045a4 <HAL_TIMEx_PWMN_Start>

	/////////Start Encoder//////////////
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 80007ba:	2100      	movs	r1, #0
 80007bc:	4808      	ldr	r0, [pc, #32]	; (80007e0 <Ligado+0x40>)
 80007be:	f003 f801 	bl	80037c4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 80007c2:	2104      	movs	r1, #4
 80007c4:	4806      	ldr	r0, [pc, #24]	; (80007e0 <Ligado+0x40>)
 80007c6:	f002 fffd 	bl	80037c4 <HAL_TIM_Encoder_Start>

	HAL_GPIO_WritePin(LED_ON_GPIO_Port, LED_ON_Pin, 1);//Pulsos sendo gerados / Led Ligado
 80007ca:	2201      	movs	r2, #1
 80007cc:	2101      	movs	r1, #1
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <Ligado+0x44>)
 80007d0:	f001 fa84 	bl	8001cdc <HAL_GPIO_WritePin>

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2000091c 	.word	0x2000091c
 80007dc:	2000088c 	.word	0x2000088c
 80007e0:	200008d4 	.word	0x200008d4
 80007e4:	40020800 	.word	0x40020800

080007e8 <Rele_Desligado>:

void Rele_Desligado(void){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED_BYPASS_GPIO_Port, LED_BYPASS_Pin, 0);//resistor ligado // Rele desligado
 80007ec:	2200      	movs	r2, #0
 80007ee:	2102      	movs	r1, #2
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <Rele_Desligado+0x1c>)
 80007f2:	f001 fa73 	bl	8001cdc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RELE_BYPASS_GPIO_Port, RELE_BYPASS_Pin, 0);// led bypass desligado
 80007f6:	2200      	movs	r2, #0
 80007f8:	2104      	movs	r1, #4
 80007fa:	4802      	ldr	r0, [pc, #8]	; (8000804 <Rele_Desligado+0x1c>)
 80007fc:	f001 fa6e 	bl	8001cdc <HAL_GPIO_WritePin>

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40020800 	.word	0x40020800

08000808 <Rele_Ligado>:

void Rele_Ligado(void){
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LED_BYPASS_GPIO_Port, LED_BYPASS_Pin, 1);//resistor desligad // Rele Ligado
 800080c:	2201      	movs	r2, #1
 800080e:	2102      	movs	r1, #2
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <Rele_Ligado+0x1c>)
 8000812:	f001 fa63 	bl	8001cdc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RELE_BYPASS_GPIO_Port, RELE_BYPASS_Pin, 1);//resistor led bypass ligado
 8000816:	2201      	movs	r2, #1
 8000818:	2104      	movs	r1, #4
 800081a:	4802      	ldr	r0, [pc, #8]	; (8000824 <Rele_Ligado+0x1c>)
 800081c:	f001 fa5e 	bl	8001cdc <HAL_GPIO_WritePin>


}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40020800 	.word	0x40020800

08000828 <Header>:

void Header(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	//////HEADER//////////
	SSD1306_GotoXY(15, 0);
 800082c:	2100      	movs	r1, #0
 800082e:	200f      	movs	r0, #15
 8000830:	f000 fa76 	bl	8000d20 <SSD1306_GotoXY>
	SSD1306_Puts("Raupp & Trento", &Font_7x10, 1);
 8000834:	2201      	movs	r2, #1
 8000836:	4904      	ldr	r1, [pc, #16]	; (8000848 <Header+0x20>)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <Header+0x24>)
 800083a:	f000 fb07 	bl	8000e4c <SSD1306_Puts>
	SSD1306_UpdateScreen(); // display
 800083e:	f000 f9c9 	bl	8000bd4 <SSD1306_UpdateScreen>
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000000 	.word	0x20000000
 800084c:	08004fd4 	.word	0x08004fd4

08000850 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM10) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a3a      	ldr	r2, [pc, #232]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d127      	bne.n	80008b2 <HAL_TIM_PeriodElapsedCallback+0x62>

		contador_encoder = (__HAL_TIM_GET_COUNTER(&htim4)); // ENCODER DE 5 A 50 s
 8000862:	4b3a      	ldr	r3, [pc, #232]	; (800094c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b39      	ldr	r3, [pc, #228]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800086c:	801a      	strh	r2, [r3, #0]

		variacao_encoder = contador_encoder + MOV_ENCODER;
 800086e:	4b38      	ldr	r3, [pc, #224]	; (8000950 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	3319      	adds	r3, #25
 8000876:	b2da      	uxtb	r2, r3
 8000878:	4b36      	ldr	r3, [pc, #216]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800087a:	701a      	strb	r2, [r3, #0]

		cont++;
 800087c:	4b36      	ldr	r3, [pc, #216]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	b29a      	uxth	r2, r3
 8000884:	4b34      	ldr	r3, [pc, #208]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000886:	801a      	strh	r2, [r3, #0]

		if (cont == TAM_SIN - 1) {
 8000888:	4b33      	ldr	r3, [pc, #204]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	2bf9      	cmp	r3, #249	; 0xf9
 800088e:	d102      	bne.n	8000896 <HAL_TIM_PeriodElapsedCallback+0x46>
			cont = 0;
 8000890:	4b31      	ldr	r3, [pc, #196]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000892:	2200      	movs	r2, #0
 8000894:	801a      	strh	r2, [r3, #0]
		}

		//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, sin_wave_mod[cont]);
		//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, sin_wave_mod[cont]);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, sin_wave[cont]);
 8000896:	4b30      	ldr	r3, [pc, #192]	; (8000958 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	4619      	mov	r1, r3
 800089c:	4b2f      	ldr	r3, [pc, #188]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a2f      	ldr	r2, [pc, #188]	; (8000960 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80008a2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80008a6:	635a      	str	r2, [r3, #52]	; 0x34

		__HAL_TIM_SET_PRESCALER(&htim10, variacao_encoder);
 80008a8:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80008aa:	781a      	ldrb	r2, [r3, #0]
 80008ac:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	629a      	str	r2, [r3, #40]	; 0x28

		//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_, sin_wave_mod[cont]);

	}

	if (htim->Instance == TIM11) {
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a2c      	ldr	r2, [pc, #176]	; (8000968 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d141      	bne.n	8000940 <HAL_TIM_PeriodElapsedCallback+0xf0>

		//////////////////DEBOUNCE E DETECCAO DE BORDA///////////////////

		bt1[AGORA] = HAL_GPIO_ReadPin(BOT1_GPIO_Port, BOT1_Pin);
 80008bc:	2101      	movs	r1, #1
 80008be:	482b      	ldr	r0, [pc, #172]	; (800096c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80008c0:	f001 f9f4 	bl	8001cac <HAL_GPIO_ReadPin>
 80008c4:	4603      	mov	r3, r0
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80008ca:	701a      	strb	r2, [r3, #0]

		if (bt1[AGORA] == 1 && bt1[ANTES] == 0) {
 80008cc:	4b28      	ldr	r3, [pc, #160]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d10f      	bne.n	80008f4 <HAL_TIM_PeriodElapsedCallback+0xa4>
 80008d4:	4b26      	ldr	r3, [pc, #152]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80008d6:	785b      	ldrb	r3, [r3, #1]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d10b      	bne.n	80008f4 <HAL_TIM_PeriodElapsedCallback+0xa4>

			bsubida = 1;
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
			bdescida = 0;
 80008e2:	4b25      	ldr	r3, [pc, #148]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
			comando++;
 80008e8:	4b24      	ldr	r3, [pc, #144]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b22      	ldr	r3, [pc, #136]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80008f2:	701a      	strb	r2, [r3, #0]

		}

		if (bt1[AGORA] == 0 && bt1[ANTES] == 1) {
 80008f4:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d109      	bne.n	8000910 <HAL_TIM_PeriodElapsedCallback+0xc0>
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80008fe:	785b      	ldrb	r3, [r3, #1]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d105      	bne.n	8000910 <HAL_TIM_PeriodElapsedCallback+0xc0>

			bdescida = 1;
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]
			bsubida = 0;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]

		}

		bt1[ANTES] = bt1[AGORA];  /////// DETC BOT 1
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000912:	781a      	ldrb	r2, [r3, #0]
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000916:	705a      	strb	r2, [r3, #1]

		if(comando >= 2){
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d902      	bls.n	8000926 <HAL_TIM_PeriodElapsedCallback+0xd6>
			comando = 0;
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
		}


		//-------------------BASE DE TEMPO--------------//
		time++;
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000930:	701a      	strb	r2, [r3, #0]

		if (time > 70)
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b46      	cmp	r3, #70	; 0x46
 8000938:	d902      	bls.n	8000940 <HAL_TIM_PeriodElapsedCallback+0xf0>
			time = 0;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]

	}

}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40014400 	.word	0x40014400
 800094c:	200008d4 	.word	0x200008d4
 8000950:	2000047a 	.word	0x2000047a
 8000954:	2000047c 	.word	0x2000047c
 8000958:	20000476 	.word	0x20000476
 800095c:	2000088c 	.word	0x2000088c
 8000960:	20000010 	.word	0x20000010
 8000964:	2000091c 	.word	0x2000091c
 8000968:	40014800 	.word	0x40014800
 800096c:	40020400 	.word	0x40020400
 8000970:	20000480 	.word	0x20000480
 8000974:	20000482 	.word	0x20000482
 8000978:	20000483 	.word	0x20000483
 800097c:	2000047d 	.word	0x2000047d
 8000980:	20000478 	.word	0x20000478

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000988:	f000 fe78 	bl	800167c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098c:	f000 f8ae 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000990:	f7ff fdba 	bl	8000508 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000994:	f000 fdd6 	bl	8001544 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000998:	f000 fb8a 	bl	80010b0 <MX_TIM1_Init>
  MX_TIM10_Init();
 800099c:	f000 fc7c 	bl	8001298 <MX_TIM10_Init>
  MX_TIM4_Init();
 80009a0:	f000 fc26 	bl	80011f0 <MX_TIM4_Init>
  MX_TIM11_Init();
 80009a4:	f000 fc9a 	bl	80012dc <MX_TIM11_Init>
  MX_I2C2_Init();
 80009a8:	f7ff fe3e 	bl	8000628 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim11);// Botao
 80009ac:	4847      	ldr	r0, [pc, #284]	; (8000acc <main+0x148>)
 80009ae:	f002 fc33 	bl	8003218 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
	while (1) {

		//============================= Maquina de estados =============================//

		switch (estado_atual) {
 80009b2:	4b47      	ldr	r3, [pc, #284]	; (8000ad0 <main+0x14c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d04f      	beq.n	8000a5a <main+0xd6>
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	dc6c      	bgt.n	8000a98 <main+0x114>
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d002      	beq.n	80009c8 <main+0x44>
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d021      	beq.n	8000a0a <main+0x86>
 80009c6:	e067      	b.n	8000a98 <main+0x114>

		case desligado:

			Desligado();
 80009c8:	f7ff fec6 	bl	8000758 <Desligado>

			Rele_Desligado();
 80009cc:	f7ff ff0c 	bl	80007e8 <Rele_Desligado>

			//-------Exibindo Desligado------//
			Header();
 80009d0:	f7ff ff2a 	bl	8000828 <Header>
			SSD1306_GotoXY(20, 30);
 80009d4:	211e      	movs	r1, #30
 80009d6:	2014      	movs	r0, #20
 80009d8:	f000 f9a2 	bl	8000d20 <SSD1306_GotoXY>
			SSD1306_Puts("DESLIGADO", &Font_11x18, 1);
 80009dc:	2201      	movs	r2, #1
 80009de:	493d      	ldr	r1, [pc, #244]	; (8000ad4 <main+0x150>)
 80009e0:	483d      	ldr	r0, [pc, #244]	; (8000ad8 <main+0x154>)
 80009e2:	f000 fa33 	bl	8000e4c <SSD1306_Puts>
			SSD1306_UpdateScreen(); // display
 80009e6:	f000 f8f5 	bl	8000bd4 <SSD1306_UpdateScreen>

			//---------------Condiçao de troca de estado--------------/////
			if(comando){
 80009ea:	4b3c      	ldr	r3, [pc, #240]	; (8000adc <main+0x158>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d064      	beq.n	8000abc <main+0x138>

			SSD1306_Clear();
 80009f2:	f000 fa50 	bl	8000e96 <SSD1306_Clear>
			comando = 0;
 80009f6:	4b39      	ldr	r3, [pc, #228]	; (8000adc <main+0x158>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
			time = 0;
 80009fc:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <main+0x15c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
			estado_atual = ligado;
 8000a02:	4b33      	ldr	r3, [pc, #204]	; (8000ad0 <main+0x14c>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]

			}

			break;
 8000a08:	e058      	b.n	8000abc <main+0x138>

		case ligado:

			Ligado();
 8000a0a:	f7ff fec9 	bl	80007a0 <Ligado>

			Rele_Desligado();
 8000a0e:	f7ff feeb 	bl	80007e8 <Rele_Desligado>

			Header();
 8000a12:	f7ff ff09 	bl	8000828 <Header>
			SSD1306_GotoXY(28, 30);
 8000a16:	211e      	movs	r1, #30
 8000a18:	201c      	movs	r0, #28
 8000a1a:	f000 f981 	bl	8000d20 <SSD1306_GotoXY>
			SSD1306_Puts("LIGADO", &Font_11x18, 1);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	492c      	ldr	r1, [pc, #176]	; (8000ad4 <main+0x150>)
 8000a22:	4830      	ldr	r0, [pc, #192]	; (8000ae4 <main+0x160>)
 8000a24:	f000 fa12 	bl	8000e4c <SSD1306_Puts>
			SSD1306_UpdateScreen(); // display
 8000a28:	f000 f8d4 	bl	8000bd4 <SSD1306_UpdateScreen>

			//---------------Condiçao de troca de estado--------------/////

			if(time >= 60){ //Se passou 3 segundos
 8000a2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ae0 <main+0x15c>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b3b      	cmp	r3, #59	; 0x3b
 8000a32:	d902      	bls.n	8000a3a <main+0xb6>

			estado_atual = bypass;
 8000a34:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <main+0x14c>)
 8000a36:	2202      	movs	r2, #2
 8000a38:	701a      	strb	r2, [r3, #0]

			}

			if(comando){
 8000a3a:	4b28      	ldr	r3, [pc, #160]	; (8000adc <main+0x158>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d03e      	beq.n	8000ac0 <main+0x13c>

			SSD1306_Clear();
 8000a42:	f000 fa28 	bl	8000e96 <SSD1306_Clear>
			comando = 0;
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <main+0x158>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
			time = 0;
 8000a4c:	4b24      	ldr	r3, [pc, #144]	; (8000ae0 <main+0x15c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
			estado_atual = desligado;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <main+0x14c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]

			}

			break;
 8000a58:	e032      	b.n	8000ac0 <main+0x13c>

		case bypass:

			Rele_Ligado();
 8000a5a:	f7ff fed5 	bl	8000808 <Rele_Ligado>

			Header();
 8000a5e:	f7ff fee3 	bl	8000828 <Header>
			SSD1306_GotoXY(28, 30);
 8000a62:	211e      	movs	r1, #30
 8000a64:	201c      	movs	r0, #28
 8000a66:	f000 f95b 	bl	8000d20 <SSD1306_GotoXY>
			SSD1306_Puts("BYPASS", &Font_11x18, 1);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4919      	ldr	r1, [pc, #100]	; (8000ad4 <main+0x150>)
 8000a6e:	481e      	ldr	r0, [pc, #120]	; (8000ae8 <main+0x164>)
 8000a70:	f000 f9ec 	bl	8000e4c <SSD1306_Puts>
			SSD1306_UpdateScreen(); // display
 8000a74:	f000 f8ae 	bl	8000bd4 <SSD1306_UpdateScreen>

			if(comando){
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <main+0x158>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d021      	beq.n	8000ac4 <main+0x140>

			SSD1306_Clear();
 8000a80:	f000 fa09 	bl	8000e96 <SSD1306_Clear>
			comando = 0;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <main+0x158>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
			time = 0;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <main+0x15c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
			estado_atual = desligado;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <main+0x14c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]

			}

			break;
 8000a96:	e015      	b.n	8000ac4 <main+0x140>


		default:

			Desligado();
 8000a98:	f7ff fe5e 	bl	8000758 <Desligado>

			//---------------Condiçao de troca de estado--------------/////

			if(comando){
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <main+0x158>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d011      	beq.n	8000ac8 <main+0x144>

			SSD1306_Clear();
 8000aa4:	f000 f9f7 	bl	8000e96 <SSD1306_Clear>

			comando = 0;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <main+0x158>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
			time = 0;
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <main+0x15c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
			estado_atual = ligado;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <main+0x14c>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]

			}

			break;
 8000aba:	e005      	b.n	8000ac8 <main+0x144>
			break;
 8000abc:	bf00      	nop
 8000abe:	e778      	b.n	80009b2 <main+0x2e>
			break;
 8000ac0:	bf00      	nop
 8000ac2:	e776      	b.n	80009b2 <main+0x2e>
			break;
 8000ac4:	bf00      	nop
 8000ac6:	e774      	b.n	80009b2 <main+0x2e>
			break;
 8000ac8:	bf00      	nop
		switch (estado_atual) {
 8000aca:	e772      	b.n	80009b2 <main+0x2e>
 8000acc:	20000964 	.word	0x20000964
 8000ad0:	20000474 	.word	0x20000474
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	08004fe4 	.word	0x08004fe4
 8000adc:	2000047d 	.word	0x2000047d
 8000ae0:	20000478 	.word	0x20000478
 8000ae4:	08004ff0 	.word	0x08004ff0
 8000ae8:	08004ff8 	.word	0x08004ff8

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b094      	sub	sp, #80	; 0x50
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	2234      	movs	r2, #52	; 0x34
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f004 fa56 	bl	8004fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <SystemClock_Config+0xd4>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	4a29      	ldr	r2, [pc, #164]	; (8000bc0 <SystemClock_Config+0xd4>)
 8000b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b20:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <SystemClock_Config+0xd4>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <SystemClock_Config+0xd8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b38:	4a22      	ldr	r2, [pc, #136]	; (8000bc4 <SystemClock_Config+0xd8>)
 8000b3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <SystemClock_Config+0xd8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b50:	2301      	movs	r3, #1
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b54:	2310      	movs	r3, #16
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b60:	2310      	movs	r3, #16
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b64:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b68:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 f85e 	bl	8002c3c <HAL_RCC_OscConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b86:	f000 f81f 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8a:	230f      	movs	r3, #15
 8000b8c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 fcfe 	bl	80025a8 <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000bb2:	f000 f809 	bl	8000bc8 <Error_Handler>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3750      	adds	r7, #80	; 0x50
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40007000 	.word	0x40007000

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bd0:	e7fe      	b.n	8000bd0 <Error_Handler+0x8>
	...

08000bd4 <SSD1306_UpdateScreen>:

	/* Return OK */
	return 1;
}

void SSD1306_UpdateScreen(void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000bda:	2300      	movs	r3, #0
 8000bdc:	71fb      	strb	r3, [r7, #7]
 8000bde:	e01d      	b.n	8000c1c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	3b50      	subs	r3, #80	; 0x50
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	461a      	mov	r2, r3
 8000be8:	2100      	movs	r1, #0
 8000bea:	2078      	movs	r0, #120	; 0x78
 8000bec:	f000 f9c2 	bl	8000f74 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	2078      	movs	r0, #120	; 0x78
 8000bf6:	f000 f9bd 	bl	8000f74 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000bfa:	2210      	movs	r2, #16
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2078      	movs	r0, #120	; 0x78
 8000c00:	f000 f9b8 	bl	8000f74 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	01db      	lsls	r3, r3, #7
 8000c08:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <SSD1306_UpdateScreen+0x58>)
 8000c0a:	441a      	add	r2, r3
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	2140      	movs	r1, #64	; 0x40
 8000c10:	2078      	movs	r0, #120	; 0x78
 8000c12:	f000 f949 	bl	8000ea8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2b07      	cmp	r3, #7
 8000c20:	d9de      	bls.n	8000be0 <SSD1306_UpdateScreen+0xc>
	}
}
 8000c22:	bf00      	nop
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000484 	.word	0x20000484

08000c30 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d101      	bne.n	8000c44 <SSD1306_Fill+0x14>
 8000c40:	2300      	movs	r3, #0
 8000c42:	e000      	b.n	8000c46 <SSD1306_Fill+0x16>
 8000c44:	23ff      	movs	r3, #255	; 0xff
 8000c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <SSD1306_Fill+0x2c>)
 8000c4e:	f004 f9ad 	bl	8004fac <memset>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000484 	.word	0x20000484

08000c60 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	80fb      	strh	r3, [r7, #6]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	80bb      	strh	r3, [r7, #4]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	70fb      	strb	r3, [r7, #3]
	if (
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	2b7f      	cmp	r3, #127	; 0x7f
 8000c76:	d848      	bhi.n	8000d0a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000c78:	88bb      	ldrh	r3, [r7, #4]
 8000c7a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c7c:	d845      	bhi.n	8000d0a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000c7e:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <SSD1306_DrawPixel+0xb8>)
 8000c80:	791b      	ldrb	r3, [r3, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d006      	beq.n	8000c94 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	bf0c      	ite	eq
 8000c8c:	2301      	moveq	r3, #1
 8000c8e:	2300      	movne	r3, #0
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000c94:	78fb      	ldrb	r3, [r7, #3]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d11a      	bne.n	8000cd0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c9a:	88fa      	ldrh	r2, [r7, #6]
 8000c9c:	88bb      	ldrh	r3, [r7, #4]
 8000c9e:	08db      	lsrs	r3, r3, #3
 8000ca0:	b298      	uxth	r0, r3
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	01db      	lsls	r3, r3, #7
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <SSD1306_DrawPixel+0xbc>)
 8000caa:	5cd3      	ldrb	r3, [r2, r3]
 8000cac:	b25a      	sxtb	r2, r3
 8000cae:	88bb      	ldrh	r3, [r7, #4]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	b25b      	sxtb	r3, r3
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b259      	sxtb	r1, r3
 8000cc0:	88fa      	ldrh	r2, [r7, #6]
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	01db      	lsls	r3, r3, #7
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2c9      	uxtb	r1, r1
 8000cca:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <SSD1306_DrawPixel+0xbc>)
 8000ccc:	54d1      	strb	r1, [r2, r3]
 8000cce:	e01d      	b.n	8000d0c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000cd0:	88fa      	ldrh	r2, [r7, #6]
 8000cd2:	88bb      	ldrh	r3, [r7, #4]
 8000cd4:	08db      	lsrs	r3, r3, #3
 8000cd6:	b298      	uxth	r0, r3
 8000cd8:	4603      	mov	r3, r0
 8000cda:	01db      	lsls	r3, r3, #7
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <SSD1306_DrawPixel+0xbc>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	b25a      	sxtb	r2, r3
 8000ce4:	88bb      	ldrh	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	2101      	movs	r1, #1
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	b259      	sxtb	r1, r3
 8000cfa:	88fa      	ldrh	r2, [r7, #6]
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	01db      	lsls	r3, r3, #7
 8000d00:	4413      	add	r3, r2
 8000d02:	b2c9      	uxtb	r1, r1
 8000d04:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <SSD1306_DrawPixel+0xbc>)
 8000d06:	54d1      	strb	r1, [r2, r3]
 8000d08:	e000      	b.n	8000d0c <SSD1306_DrawPixel+0xac>
		return;
 8000d0a:	bf00      	nop
	}
}
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000884 	.word	0x20000884
 8000d1c:	20000484 	.word	0x20000484

08000d20 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	460a      	mov	r2, r1
 8000d2a:	80fb      	strh	r3, [r7, #6]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000d30:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <SSD1306_GotoXY+0x28>)
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <SSD1306_GotoXY+0x28>)
 8000d38:	88bb      	ldrh	r3, [r7, #4]
 8000d3a:	8053      	strh	r3, [r2, #2]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	20000884 	.word	0x20000884

08000d4c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000d5c:	4b3a      	ldr	r3, [pc, #232]	; (8000e48 <SSD1306_Putc+0xfc>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
	if (
 8000d68:	2b7f      	cmp	r3, #127	; 0x7f
 8000d6a:	dc07      	bgt.n	8000d7c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000d6c:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <SSD1306_Putc+0xfc>)
 8000d6e:	885b      	ldrh	r3, [r3, #2]
 8000d70:	461a      	mov	r2, r3
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	785b      	ldrb	r3, [r3, #1]
 8000d76:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000d78:	2b3f      	cmp	r3, #63	; 0x3f
 8000d7a:	dd01      	ble.n	8000d80 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e05e      	b.n	8000e3e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e04b      	b.n	8000e1e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	3b20      	subs	r3, #32
 8000d8e:	6839      	ldr	r1, [r7, #0]
 8000d90:	7849      	ldrb	r1, [r1, #1]
 8000d92:	fb01 f303 	mul.w	r3, r1, r3
 8000d96:	4619      	mov	r1, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	440b      	add	r3, r1
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4413      	add	r3, r2
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	e030      	b.n	8000e0c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d010      	beq.n	8000ddc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <SSD1306_Putc+0xfc>)
 8000dbc:	881a      	ldrh	r2, [r3, #0]
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	4413      	add	r3, r2
 8000dc4:	b298      	uxth	r0, r3
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <SSD1306_Putc+0xfc>)
 8000dc8:	885a      	ldrh	r2, [r3, #2]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	4413      	add	r3, r2
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	79ba      	ldrb	r2, [r7, #6]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f7ff ff43 	bl	8000c60 <SSD1306_DrawPixel>
 8000dda:	e014      	b.n	8000e06 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <SSD1306_Putc+0xfc>)
 8000dde:	881a      	ldrh	r2, [r3, #0]
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	4413      	add	r3, r2
 8000de6:	b298      	uxth	r0, r3
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <SSD1306_Putc+0xfc>)
 8000dea:	885a      	ldrh	r2, [r3, #2]
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	4413      	add	r3, r2
 8000df2:	b299      	uxth	r1, r3
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bf0c      	ite	eq
 8000dfa:	2301      	moveq	r3, #1
 8000dfc:	2300      	movne	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	461a      	mov	r2, r3
 8000e02:	f7ff ff2d 	bl	8000c60 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d3c8      	bcc.n	8000daa <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	785b      	ldrb	r3, [r3, #1]
 8000e22:	461a      	mov	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d3ad      	bcc.n	8000d86 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <SSD1306_Putc+0xfc>)
 8000e2c:	881a      	ldrh	r2, [r3, #0]
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <SSD1306_Putc+0xfc>)
 8000e3a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000884 	.word	0x20000884

08000e4c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	4613      	mov	r3, r2
 8000e58:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000e5a:	e012      	b.n	8000e82 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	79fa      	ldrb	r2, [r7, #7]
 8000e62:	68b9      	ldr	r1, [r7, #8]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff71 	bl	8000d4c <SSD1306_Putc>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d002      	beq.n	8000e7c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	e008      	b.n	8000e8e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1e8      	bne.n	8000e5c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f7ff fec8 	bl	8000c30 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000ea0:	f7ff fe98 	bl	8000bd4 <SSD1306_UpdateScreen>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b0c7      	sub	sp, #284	; 0x11c
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	4604      	mov	r4, r0
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000eb6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000eba:	600a      	str	r2, [r1, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ec2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000ec6:	4622      	mov	r2, r4
 8000ec8:	701a      	strb	r2, [r3, #0]
 8000eca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ece:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	701a      	strb	r2, [r3, #0]
 8000ed6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000eda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ede:	460a      	mov	r2, r1
 8000ee0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000ee2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ee6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000eea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000eee:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000ef2:	7812      	ldrb	r2, [r2, #0]
 8000ef4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000efc:	e015      	b.n	8000f2a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000efe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f02:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f06:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000f0a:	6812      	ldr	r2, [r2, #0]
 8000f0c:	441a      	add	r2, r3
 8000f0e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f12:	3301      	adds	r3, #1
 8000f14:	7811      	ldrb	r1, [r2, #0]
 8000f16:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f1a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000f1e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000f20:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f24:	3301      	adds	r3, #1
 8000f26:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000f2a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000f34:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000f38:	8812      	ldrh	r2, [r2, #0]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d8df      	bhi.n	8000efe <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8000f3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f42:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b299      	uxth	r1, r3
 8000f4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	f107 020c 	add.w	r2, r7, #12
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	9000      	str	r0, [sp, #0]
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <ssd1306_I2C_WriteMulti+0xc8>)
 8000f62:	f001 f819 	bl	8001f98 <HAL_I2C_Master_Transmit>
}
 8000f66:	bf00      	nop
 8000f68:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd90      	pop	{r4, r7, pc}
 8000f70:	20000420 	.word	0x20000420

08000f74 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	71bb      	strb	r3, [r7, #6]
 8000f82:	4613      	mov	r3, r2
 8000f84:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000f8a:	797b      	ldrb	r3, [r7, #5]
 8000f8c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	b299      	uxth	r1, r3
 8000f92:	f107 020c 	add.w	r2, r7, #12
 8000f96:	230a      	movs	r3, #10
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <ssd1306_I2C_Write+0x38>)
 8000f9e:	f000 fffb 	bl	8001f98 <HAL_I2C_Master_Transmit>
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000420 	.word	0x20000420

08000fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a0f      	ldr	r2, [pc, #60]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_MspInit+0x4c>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fee:	2007      	movs	r0, #7
 8000ff0:	f000 fc86 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <NMI_Handler+0x4>

08001006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <MemManage_Handler+0x4>

08001012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <UsageFault_Handler+0x4>

0800101e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104c:	f000 fb68 	bl	8001720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800105a:	f002 fcd8 	bl	8003a0e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800105e:	4803      	ldr	r0, [pc, #12]	; (800106c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001060:	f002 fcd5 	bl	8003a0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000088c 	.word	0x2000088c
 800106c:	2000091c 	.word	0x2000091c

08001070 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001076:	f002 fcca 	bl	8003a0e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800107a:	4803      	ldr	r0, [pc, #12]	; (8001088 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800107c:	f002 fcc7 	bl	8003a0e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2000088c 	.word	0x2000088c
 8001088:	20000964 	.word	0x20000964

0800108c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <SystemInit+0x20>)
 8001092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001096:	4a05      	ldr	r2, [pc, #20]	; (80010ac <SystemInit+0x20>)
 8001098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800109c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b096      	sub	sp, #88	; 0x58
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]
 80010de:	615a      	str	r2, [r3, #20]
 80010e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2220      	movs	r2, #32
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f003 ff5f 	bl	8004fac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ee:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <MX_TIM1_Init+0x138>)
 80010f0:	4a3e      	ldr	r2, [pc, #248]	; (80011ec <MX_TIM1_Init+0x13c>)
 80010f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 28-1;
 80010f4:	4b3c      	ldr	r3, [pc, #240]	; (80011e8 <MX_TIM1_Init+0x138>)
 80010f6:	221b      	movs	r2, #27
 80010f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fa:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <MX_TIM1_Init+0x138>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8001100:	4b39      	ldr	r3, [pc, #228]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001102:	22c7      	movs	r2, #199	; 0xc7
 8001104:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001106:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800110c:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <MX_TIM1_Init+0x138>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001112:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001118:	4833      	ldr	r0, [pc, #204]	; (80011e8 <MX_TIM1_Init+0x138>)
 800111a:	f002 f82d 	bl	8003178 <HAL_TIM_Base_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001124:	f7ff fd50 	bl	8000bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800112e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001132:	4619      	mov	r1, r3
 8001134:	482c      	ldr	r0, [pc, #176]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001136:	f002 fe35 	bl	8003da4 <HAL_TIM_ConfigClockSource>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001140:	f7ff fd42 	bl	8000bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001144:	4828      	ldr	r0, [pc, #160]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001146:	f002 f906 	bl	8003356 <HAL_TIM_PWM_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001150:	f7ff fd3a 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800115c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001160:	4619      	mov	r1, r3
 8001162:	4821      	ldr	r0, [pc, #132]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001164:	f003 fb36 	bl	80047d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800116e:	f7ff fd2b 	bl	8000bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001172:	2360      	movs	r3, #96	; 0x60
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800117e:	2300      	movs	r3, #0
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	2200      	movs	r2, #0
 8001194:	4619      	mov	r1, r3
 8001196:	4814      	ldr	r0, [pc, #80]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001198:	f002 fd42 	bl	8003c20 <HAL_TIM_PWM_ConfigChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80011a2:	f7ff fd11 	bl	8000bc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 200;
 80011b2:	23c8      	movs	r3, #200	; 0xc8
 80011b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4619      	mov	r1, r3
 80011c8:	4807      	ldr	r0, [pc, #28]	; (80011e8 <MX_TIM1_Init+0x138>)
 80011ca:	f003 fb7f 	bl	80048cc <HAL_TIMEx_ConfigBreakDeadTime>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80011d4:	f7ff fcf8 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011d8:	4803      	ldr	r0, [pc, #12]	; (80011e8 <MX_TIM1_Init+0x138>)
 80011da:	f000 f957 	bl	800148c <HAL_TIM_MspPostInit>

}
 80011de:	bf00      	nop
 80011e0:	3758      	adds	r7, #88	; 0x58
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000088c 	.word	0x2000088c
 80011ec:	40010000 	.word	0x40010000

080011f0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	; 0x30
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	2224      	movs	r2, #36	; 0x24
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 fed4 	bl	8004fac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800120c:	4b20      	ldr	r3, [pc, #128]	; (8001290 <MX_TIM4_Init+0xa0>)
 800120e:	4a21      	ldr	r2, [pc, #132]	; (8001294 <MX_TIM4_Init+0xa4>)
 8001210:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <MX_TIM4_Init+0xa0>)
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_TIM4_Init+0xa0>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <MX_TIM4_Init+0xa0>)
 8001220:	2205      	movs	r2, #5
 8001222:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_TIM4_Init+0xa0>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <MX_TIM4_Init+0xa0>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001230:	2301      	movs	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001238:	2301      	movs	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001244:	2300      	movs	r3, #0
 8001246:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001248:	2301      	movs	r3, #1
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	4619      	mov	r1, r3
 800125a:	480d      	ldr	r0, [pc, #52]	; (8001290 <MX_TIM4_Init+0xa0>)
 800125c:	f002 fa0c 	bl	8003678 <HAL_TIM_Encoder_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8001266:	f7ff fcaf 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4619      	mov	r1, r3
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <MX_TIM4_Init+0xa0>)
 8001278:	f003 faac 	bl	80047d4 <HAL_TIMEx_MasterConfigSynchronization>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001282:	f7ff fca1 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	3730      	adds	r7, #48	; 0x30
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200008d4 	.word	0x200008d4
 8001294:	40000800 	.word	0x40000800

08001298 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800129c:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <MX_TIM10_Init+0x3c>)
 800129e:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <MX_TIM10_Init+0x40>)
 80012a0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 28-1;
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <MX_TIM10_Init+0x3c>)
 80012a4:	221b      	movs	r2, #27
 80012a6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <MX_TIM10_Init+0x3c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 200-1;
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MX_TIM10_Init+0x3c>)
 80012b0:	22c7      	movs	r2, #199	; 0xc7
 80012b2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <MX_TIM10_Init+0x3c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_TIM10_Init+0x3c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80012c0:	4804      	ldr	r0, [pc, #16]	; (80012d4 <MX_TIM10_Init+0x3c>)
 80012c2:	f001 ff59 	bl	8003178 <HAL_TIM_Base_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 80012cc:	f7ff fc7c 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000091c 	.word	0x2000091c
 80012d8:	40014400 	.word	0x40014400

080012dc <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_TIM11_Init+0x40>)
 80012e2:	4a0f      	ldr	r2, [pc, #60]	; (8001320 <MX_TIM11_Init+0x44>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 8400-1;
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <MX_TIM11_Init+0x40>)
 80012e8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80012ec:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_TIM11_Init+0x40>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 700-1;
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_TIM11_Init+0x40>)
 80012f6:	f240 22bb 	movw	r2, #699	; 0x2bb
 80012fa:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <MX_TIM11_Init+0x40>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_TIM11_Init+0x40>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	; (800131c <MX_TIM11_Init+0x40>)
 800130a:	f001 ff35 	bl	8003178 <HAL_TIM_Base_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001314:	f7ff fc58 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000964 	.word	0x20000964
 8001320:	40014800 	.word	0x40014800

08001324 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a2e      	ldr	r2, [pc, #184]	; (80013ec <HAL_TIM_Base_MspInit+0xc8>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d11e      	bne.n	8001374 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <HAL_TIM_Base_MspInit+0xcc>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a2c      	ldr	r2, [pc, #176]	; (80013f0 <HAL_TIM_Base_MspInit+0xcc>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <HAL_TIM_Base_MspInit+0xcc>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	2019      	movs	r0, #25
 8001358:	f000 fadd 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800135c:	2019      	movs	r0, #25
 800135e:	f000 faf6 	bl	800194e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	201a      	movs	r0, #26
 8001368:	f000 fad5 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800136c:	201a      	movs	r0, #26
 800136e:	f000 faee 	bl	800194e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001372:	e036      	b.n	80013e2 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM10)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <HAL_TIM_Base_MspInit+0xd0>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d116      	bne.n	80013ac <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_TIM_Base_MspInit+0xcc>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a1a      	ldr	r2, [pc, #104]	; (80013f0 <HAL_TIM_Base_MspInit+0xcc>)
 8001388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_TIM_Base_MspInit+0xcc>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	2019      	movs	r0, #25
 80013a0:	f000 fab9 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013a4:	2019      	movs	r0, #25
 80013a6:	f000 fad2 	bl	800194e <HAL_NVIC_EnableIRQ>
}
 80013aa:	e01a      	b.n	80013e2 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM11)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <HAL_TIM_Base_MspInit+0xd4>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d115      	bne.n	80013e2 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <HAL_TIM_Base_MspInit+0xcc>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <HAL_TIM_Base_MspInit+0xcc>)
 80013c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_TIM_Base_MspInit+0xcc>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	201a      	movs	r0, #26
 80013d8:	f000 fa9d 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80013dc:	201a      	movs	r0, #26
 80013de:	f000 fab6 	bl	800194e <HAL_NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40010000 	.word	0x40010000
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40014400 	.word	0x40014400
 80013f8:	40014800 	.word	0x40014800

080013fc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a19      	ldr	r2, [pc, #100]	; (8001480 <HAL_TIM_Encoder_MspInit+0x84>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d12b      	bne.n	8001476 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_TIM_Encoder_MspInit+0x88>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a17      	ldr	r2, [pc, #92]	; (8001484 <HAL_TIM_Encoder_MspInit+0x88>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_TIM_Encoder_MspInit+0x88>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_TIM_Encoder_MspInit+0x88>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <HAL_TIM_Encoder_MspInit+0x88>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_TIM_Encoder_MspInit+0x88>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001456:	23c0      	movs	r3, #192	; 0xc0
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001466:	2302      	movs	r3, #2
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001472:	f000 fa87 	bl	8001984 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001476:	bf00      	nop
 8001478:	3728      	adds	r7, #40	; 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40000800 	.word	0x40000800
 8001484:	40023800 	.word	0x40023800
 8001488:	40020400 	.word	0x40020400

0800148c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a22      	ldr	r2, [pc, #136]	; (8001534 <HAL_TIM_MspPostInit+0xa8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d13d      	bne.n	800152a <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	4b21      	ldr	r3, [pc, #132]	; (8001538 <HAL_TIM_MspPostInit+0xac>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a20      	ldr	r2, [pc, #128]	; (8001538 <HAL_TIM_MspPostInit+0xac>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <HAL_TIM_MspPostInit+0xac>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <HAL_TIM_MspPostInit+0xac>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a19      	ldr	r2, [pc, #100]	; (8001538 <HAL_TIM_MspPostInit+0xac>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <HAL_TIM_MspPostInit+0xac>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014f8:	2301      	movs	r3, #1
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	480e      	ldr	r0, [pc, #56]	; (800153c <HAL_TIM_MspPostInit+0xb0>)
 8001504:	f000 fa3e 	bl	8001984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800151a:	2301      	movs	r3, #1
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4806      	ldr	r0, [pc, #24]	; (8001540 <HAL_TIM_MspPostInit+0xb4>)
 8001526:	f000 fa2d 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40010000 	.word	0x40010000
 8001538:	40023800 	.word	0x40023800
 800153c:	40020400 	.word	0x40020400
 8001540:	40020000 	.word	0x40020000

08001544 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 800154a:	4a12      	ldr	r2, [pc, #72]	; (8001594 <MX_USART2_UART_Init+0x50>)
 800154c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 8001550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001554:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 800156a:	220c      	movs	r2, #12
 800156c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156e:	4b08      	ldr	r3, [pc, #32]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_USART2_UART_Init+0x4c>)
 800157c:	f003 fa31 	bl	80049e2 <HAL_UART_Init>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001586:	f7ff fb1f 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200009ac 	.word	0x200009ac
 8001594:	40004400 	.word	0x40004400

08001598 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a19      	ldr	r2, [pc, #100]	; (800161c <HAL_UART_MspInit+0x84>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12b      	bne.n	8001612 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a10      	ldr	r2, [pc, #64]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_UART_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015f2:	230c      	movs	r3, #12
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001602:	2307      	movs	r3, #7
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <HAL_UART_MspInit+0x8c>)
 800160e:	f000 f9b9 	bl	8001984 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001612:	bf00      	nop
 8001614:	3728      	adds	r7, #40	; 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40004400 	.word	0x40004400
 8001620:	40023800 	.word	0x40023800
 8001624:	40020000 	.word	0x40020000

08001628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001660 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800162c:	480d      	ldr	r0, [pc, #52]	; (8001664 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800162e:	490e      	ldr	r1, [pc, #56]	; (8001668 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001630:	4a0e      	ldr	r2, [pc, #56]	; (800166c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001634:	e002      	b.n	800163c <LoopCopyDataInit>

08001636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163a:	3304      	adds	r3, #4

0800163c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800163c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001640:	d3f9      	bcc.n	8001636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001642:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001644:	4c0b      	ldr	r4, [pc, #44]	; (8001674 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001648:	e001      	b.n	800164e <LoopFillZerobss>

0800164a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800164c:	3204      	adds	r2, #4

0800164e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001650:	d3fb      	bcc.n	800164a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001652:	f7ff fd1b 	bl	800108c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001656:	f003 fc85 	bl	8004f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165a:	f7ff f993 	bl	8000984 <main>
  bx  lr    
 800165e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001660:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001668:	20000404 	.word	0x20000404
  ldr r2, =_sidata
 800166c:	080064f0 	.word	0x080064f0
  ldr r2, =_sbss
 8001670:	20000404 	.word	0x20000404
  ldr r4, =_ebss
 8001674:	200009f4 	.word	0x200009f4

08001678 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001678:	e7fe      	b.n	8001678 <ADC_IRQHandler>
	...

0800167c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <HAL_Init+0x40>)
 8001686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <HAL_Init+0x40>)
 8001692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001696:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <HAL_Init+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a07      	ldr	r2, [pc, #28]	; (80016bc <HAL_Init+0x40>)
 800169e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a4:	2003      	movs	r0, #3
 80016a6:	f000 f92b 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016aa:	2000      	movs	r0, #0
 80016ac:	f000 f808 	bl	80016c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b0:	f7ff fc7e 	bl	8000fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023c00 	.word	0x40023c00

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_InitTick+0x54>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x58>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f943 	bl	800196a <HAL_SYSTICK_Config>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00e      	b.n	800170c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d80a      	bhi.n	800170a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f000 f90b 	bl	8001916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001700:	4a06      	ldr	r2, [pc, #24]	; (800171c <HAL_InitTick+0x5c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200003f8 	.word	0x200003f8
 8001718:	20000400 	.word	0x20000400
 800171c:	200003fc 	.word	0x200003fc

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x20>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x24>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_IncTick+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000400 	.word	0x20000400
 8001744:	200009f0 	.word	0x200009f0

08001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_GetTick+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	200009f0 	.word	0x200009f0

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4907      	ldr	r1, [pc, #28]	; (80017fc <__NVIC_EnableIRQ+0x38>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	; (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018cc:	d301      	bcc.n	80018d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00f      	b.n	80018f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <SysTick_Config+0x40>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018da:	210f      	movs	r1, #15
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f7ff ff8e 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <SysTick_Config+0x40>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ea:	4b04      	ldr	r3, [pc, #16]	; (80018fc <SysTick_Config+0x40>)
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010

08001900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff29 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001928:	f7ff ff3e 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 800192c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f7ff ff8e 	bl	8001854 <NVIC_EncodePriority>
 8001938:	4602      	mov	r2, r0
 800193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff5d 	bl	8001800 <__NVIC_SetPriority>
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff31 	bl	80017c4 <__NVIC_EnableIRQ>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffa2 	bl	80018bc <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	; 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	e165      	b.n	8001c6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019a0:	2201      	movs	r2, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	f040 8154 	bne.w	8001c66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d005      	beq.n	80019d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d130      	bne.n	8001a38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	2203      	movs	r2, #3
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	091b      	lsrs	r3, r3, #4
 8001a22:	f003 0201 	and.w	r2, r3, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d017      	beq.n	8001a74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d123      	bne.n	8001ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	08da      	lsrs	r2, r3, #3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3208      	adds	r2, #8
 8001a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	220f      	movs	r2, #15
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	08da      	lsrs	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3208      	adds	r2, #8
 8001ac2:	69b9      	ldr	r1, [r7, #24]
 8001ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0203 	and.w	r2, r3, #3
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80ae 	beq.w	8001c66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b5d      	ldr	r3, [pc, #372]	; (8001c84 <HAL_GPIO_Init+0x300>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a5c      	ldr	r2, [pc, #368]	; (8001c84 <HAL_GPIO_Init+0x300>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b5a      	ldr	r3, [pc, #360]	; (8001c84 <HAL_GPIO_Init+0x300>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b26:	4a58      	ldr	r2, [pc, #352]	; (8001c88 <HAL_GPIO_Init+0x304>)
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a4f      	ldr	r2, [pc, #316]	; (8001c8c <HAL_GPIO_Init+0x308>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d025      	beq.n	8001b9e <HAL_GPIO_Init+0x21a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a4e      	ldr	r2, [pc, #312]	; (8001c90 <HAL_GPIO_Init+0x30c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d01f      	beq.n	8001b9a <HAL_GPIO_Init+0x216>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4d      	ldr	r2, [pc, #308]	; (8001c94 <HAL_GPIO_Init+0x310>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d019      	beq.n	8001b96 <HAL_GPIO_Init+0x212>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4c      	ldr	r2, [pc, #304]	; (8001c98 <HAL_GPIO_Init+0x314>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d013      	beq.n	8001b92 <HAL_GPIO_Init+0x20e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4b      	ldr	r2, [pc, #300]	; (8001c9c <HAL_GPIO_Init+0x318>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d00d      	beq.n	8001b8e <HAL_GPIO_Init+0x20a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4a      	ldr	r2, [pc, #296]	; (8001ca0 <HAL_GPIO_Init+0x31c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d007      	beq.n	8001b8a <HAL_GPIO_Init+0x206>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a49      	ldr	r2, [pc, #292]	; (8001ca4 <HAL_GPIO_Init+0x320>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d101      	bne.n	8001b86 <HAL_GPIO_Init+0x202>
 8001b82:	2306      	movs	r3, #6
 8001b84:	e00c      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b86:	2307      	movs	r3, #7
 8001b88:	e00a      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b8a:	2305      	movs	r3, #5
 8001b8c:	e008      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b8e:	2304      	movs	r3, #4
 8001b90:	e006      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b92:	2303      	movs	r3, #3
 8001b94:	e004      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e002      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_GPIO_Init+0x21c>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	69fa      	ldr	r2, [r7, #28]
 8001ba2:	f002 0203 	and.w	r2, r2, #3
 8001ba6:	0092      	lsls	r2, r2, #2
 8001ba8:	4093      	lsls	r3, r2
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bb0:	4935      	ldr	r1, [pc, #212]	; (8001c88 <HAL_GPIO_Init+0x304>)
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	089b      	lsrs	r3, r3, #2
 8001bb6:	3302      	adds	r3, #2
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bbe:	4b3a      	ldr	r3, [pc, #232]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001be2:	4a31      	ldr	r2, [pc, #196]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001be8:	4b2f      	ldr	r3, [pc, #188]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c0c:	4a26      	ldr	r2, [pc, #152]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c12:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c36:	4a1c      	ldr	r2, [pc, #112]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c60:	4a11      	ldr	r2, [pc, #68]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	61fb      	str	r3, [r7, #28]
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	2b0f      	cmp	r3, #15
 8001c70:	f67f ae96 	bls.w	80019a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40013800 	.word	0x40013800
 8001c8c:	40020000 	.word	0x40020000
 8001c90:	40020400 	.word	0x40020400
 8001c94:	40020800 	.word	0x40020800
 8001c98:	40020c00 	.word	0x40020c00
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40021400 	.word	0x40021400
 8001ca4:	40021800 	.word	0x40021800
 8001ca8:	40013c00 	.word	0x40013c00

08001cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	e001      	b.n	8001cce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cec:	787b      	ldrb	r3, [r7, #1]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cf8:	e003      	b.n	8001d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cfa:	887b      	ldrh	r3, [r7, #2]
 8001cfc:	041a      	lsls	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	619a      	str	r2, [r3, #24]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e12b      	b.n	8001f7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d106      	bne.n	8001d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7fe fca4 	bl	8000684 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2224      	movs	r2, #36	; 0x24
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0201 	bic.w	r2, r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d74:	f000 fd0a 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 8001d78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4a81      	ldr	r2, [pc, #516]	; (8001f84 <HAL_I2C_Init+0x274>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d807      	bhi.n	8001d94 <HAL_I2C_Init+0x84>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4a80      	ldr	r2, [pc, #512]	; (8001f88 <HAL_I2C_Init+0x278>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	bf94      	ite	ls
 8001d8c:	2301      	movls	r3, #1
 8001d8e:	2300      	movhi	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	e006      	b.n	8001da2 <HAL_I2C_Init+0x92>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4a7d      	ldr	r2, [pc, #500]	; (8001f8c <HAL_I2C_Init+0x27c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	bf94      	ite	ls
 8001d9c:	2301      	movls	r3, #1
 8001d9e:	2300      	movhi	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0e7      	b.n	8001f7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4a78      	ldr	r2, [pc, #480]	; (8001f90 <HAL_I2C_Init+0x280>)
 8001dae:	fba2 2303 	umull	r2, r3, r2, r3
 8001db2:	0c9b      	lsrs	r3, r3, #18
 8001db4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	4a6a      	ldr	r2, [pc, #424]	; (8001f84 <HAL_I2C_Init+0x274>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d802      	bhi.n	8001de4 <HAL_I2C_Init+0xd4>
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3301      	adds	r3, #1
 8001de2:	e009      	b.n	8001df8 <HAL_I2C_Init+0xe8>
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	4a69      	ldr	r2, [pc, #420]	; (8001f94 <HAL_I2C_Init+0x284>)
 8001df0:	fba2 2303 	umull	r2, r3, r2, r3
 8001df4:	099b      	lsrs	r3, r3, #6
 8001df6:	3301      	adds	r3, #1
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	495c      	ldr	r1, [pc, #368]	; (8001f84 <HAL_I2C_Init+0x274>)
 8001e14:	428b      	cmp	r3, r1
 8001e16:	d819      	bhi.n	8001e4c <HAL_I2C_Init+0x13c>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1e59      	subs	r1, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e26:	1c59      	adds	r1, r3, #1
 8001e28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e2c:	400b      	ands	r3, r1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00a      	beq.n	8001e48 <HAL_I2C_Init+0x138>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1e59      	subs	r1, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e40:	3301      	adds	r3, #1
 8001e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e46:	e051      	b.n	8001eec <HAL_I2C_Init+0x1dc>
 8001e48:	2304      	movs	r3, #4
 8001e4a:	e04f      	b.n	8001eec <HAL_I2C_Init+0x1dc>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d111      	bne.n	8001e78 <HAL_I2C_Init+0x168>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1e58      	subs	r0, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	440b      	add	r3, r1
 8001e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e66:	3301      	adds	r3, #1
 8001e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	e012      	b.n	8001e9e <HAL_I2C_Init+0x18e>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1e58      	subs	r0, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6859      	ldr	r1, [r3, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	0099      	lsls	r1, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_I2C_Init+0x196>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e022      	b.n	8001eec <HAL_I2C_Init+0x1dc>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10e      	bne.n	8001ecc <HAL_I2C_Init+0x1bc>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1e58      	subs	r0, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6859      	ldr	r1, [r3, #4]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	440b      	add	r3, r1
 8001ebc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eca:	e00f      	b.n	8001eec <HAL_I2C_Init+0x1dc>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1e58      	subs	r0, r3, #1
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	0099      	lsls	r1, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	6809      	ldr	r1, [r1, #0]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69da      	ldr	r2, [r3, #28]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6911      	ldr	r1, [r2, #16]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	68d2      	ldr	r2, [r2, #12]
 8001f26:	4311      	orrs	r1, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695a      	ldr	r2, [r3, #20]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	000186a0 	.word	0x000186a0
 8001f88:	001e847f 	.word	0x001e847f
 8001f8c:	003d08ff 	.word	0x003d08ff
 8001f90:	431bde83 	.word	0x431bde83
 8001f94:	10624dd3 	.word	0x10624dd3

08001f98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	817b      	strh	r3, [r7, #10]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fac:	f7ff fbcc 	bl	8001748 <HAL_GetTick>
 8001fb0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	f040 80e0 	bne.w	8002180 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	2319      	movs	r3, #25
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	4970      	ldr	r1, [pc, #448]	; (800218c <HAL_I2C_Master_Transmit+0x1f4>)
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 f964 	bl	8002298 <I2C_WaitOnFlagUntilTimeout>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e0d3      	b.n	8002182 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_I2C_Master_Transmit+0x50>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e0cc      	b.n	8002182 <HAL_I2C_Master_Transmit+0x1ea>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d007      	beq.n	800200e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 0201 	orr.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800201c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2221      	movs	r2, #33	; 0x21
 8002022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2210      	movs	r2, #16
 800202a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	893a      	ldrh	r2, [r7, #8]
 800203e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4a50      	ldr	r2, [pc, #320]	; (8002190 <HAL_I2C_Master_Transmit+0x1f8>)
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002050:	8979      	ldrh	r1, [r7, #10]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	6a3a      	ldr	r2, [r7, #32]
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 f89c 	bl	8002194 <I2C_MasterRequestWrite>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e08d      	b.n	8002182 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800207c:	e066      	b.n	800214c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	6a39      	ldr	r1, [r7, #32]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 f9de 	bl	8002444 <I2C_WaitOnTXEFlagUntilTimeout>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00d      	beq.n	80020aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	2b04      	cmp	r3, #4
 8002094:	d107      	bne.n	80020a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e06b      	b.n	8002182 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	781a      	ldrb	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	3b01      	subs	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d11b      	bne.n	8002120 <HAL_I2C_Master_Transmit+0x188>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d017      	beq.n	8002120 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	781a      	ldrb	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	6a39      	ldr	r1, [r7, #32]
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 f9ce 	bl	80024c6 <I2C_WaitOnBTFFlagUntilTimeout>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00d      	beq.n	800214c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	2b04      	cmp	r3, #4
 8002136:	d107      	bne.n	8002148 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002146:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e01a      	b.n	8002182 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	2b00      	cmp	r3, #0
 8002152:	d194      	bne.n	800207e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2220      	movs	r2, #32
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	e000      	b.n	8002182 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002180:	2302      	movs	r3, #2
  }
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	00100002 	.word	0x00100002
 8002190:	ffff0000 	.word	0xffff0000

08002194 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af02      	add	r7, sp, #8
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	460b      	mov	r3, r1
 80021a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d006      	beq.n	80021be <I2C_MasterRequestWrite+0x2a>
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d003      	beq.n	80021be <I2C_MasterRequestWrite+0x2a>
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021bc:	d108      	bne.n	80021d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	e00b      	b.n	80021e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d4:	2b12      	cmp	r3, #18
 80021d6:	d107      	bne.n	80021e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 f84f 	bl	8002298 <I2C_WaitOnFlagUntilTimeout>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00d      	beq.n	800221c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220e:	d103      	bne.n	8002218 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002216:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e035      	b.n	8002288 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002224:	d108      	bne.n	8002238 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002226:	897b      	ldrh	r3, [r7, #10]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002234:	611a      	str	r2, [r3, #16]
 8002236:	e01b      	b.n	8002270 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002238:	897b      	ldrh	r3, [r7, #10]
 800223a:	11db      	asrs	r3, r3, #7
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f003 0306 	and.w	r3, r3, #6
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f063 030f 	orn	r3, r3, #15
 8002248:	b2da      	uxtb	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	490e      	ldr	r1, [pc, #56]	; (8002290 <I2C_MasterRequestWrite+0xfc>)
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f000 f875 	bl	8002346 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e010      	b.n	8002288 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002266:	897b      	ldrh	r3, [r7, #10]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4907      	ldr	r1, [pc, #28]	; (8002294 <I2C_MasterRequestWrite+0x100>)
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f865 	bl	8002346 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	00010008 	.word	0x00010008
 8002294:	00010002 	.word	0x00010002

08002298 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	4613      	mov	r3, r2
 80022a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022a8:	e025      	b.n	80022f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b0:	d021      	beq.n	80022f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b2:	f7ff fa49 	bl	8001748 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d302      	bcc.n	80022c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d116      	bne.n	80022f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2220      	movs	r2, #32
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f043 0220 	orr.w	r2, r3, #32
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e023      	b.n	800233e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	0c1b      	lsrs	r3, r3, #16
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d10d      	bne.n	800231c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	43da      	mvns	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4013      	ands	r3, r2
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	bf0c      	ite	eq
 8002312:	2301      	moveq	r3, #1
 8002314:	2300      	movne	r3, #0
 8002316:	b2db      	uxtb	r3, r3
 8002318:	461a      	mov	r2, r3
 800231a:	e00c      	b.n	8002336 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4013      	ands	r3, r2
 8002328:	b29b      	uxth	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	bf0c      	ite	eq
 800232e:	2301      	moveq	r3, #1
 8002330:	2300      	movne	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	429a      	cmp	r2, r3
 800233a:	d0b6      	beq.n	80022aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002354:	e051      	b.n	80023fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002364:	d123      	bne.n	80023ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002374:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800237e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f043 0204 	orr.w	r2, r3, #4
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e046      	b.n	800243c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b4:	d021      	beq.n	80023fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b6:	f7ff f9c7 	bl	8001748 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d302      	bcc.n	80023cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d116      	bne.n	80023fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2220      	movs	r2, #32
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f043 0220 	orr.w	r2, r3, #32
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e020      	b.n	800243c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	0c1b      	lsrs	r3, r3, #16
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b01      	cmp	r3, #1
 8002402:	d10c      	bne.n	800241e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4013      	ands	r3, r2
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	bf14      	ite	ne
 8002416:	2301      	movne	r3, #1
 8002418:	2300      	moveq	r3, #0
 800241a:	b2db      	uxtb	r3, r3
 800241c:	e00b      	b.n	8002436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	43da      	mvns	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	4013      	ands	r3, r2
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf14      	ite	ne
 8002430:	2301      	movne	r3, #1
 8002432:	2300      	moveq	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d18d      	bne.n	8002356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002450:	e02d      	b.n	80024ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f878 	bl	8002548 <I2C_IsAcknowledgeFailed>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e02d      	b.n	80024be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002468:	d021      	beq.n	80024ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800246a:	f7ff f96d 	bl	8001748 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	429a      	cmp	r2, r3
 8002478:	d302      	bcc.n	8002480 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d116      	bne.n	80024ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f043 0220 	orr.w	r2, r3, #32
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e007      	b.n	80024be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b8:	2b80      	cmp	r3, #128	; 0x80
 80024ba:	d1ca      	bne.n	8002452 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024d2:	e02d      	b.n	8002530 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f837 	bl	8002548 <I2C_IsAcknowledgeFailed>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e02d      	b.n	8002540 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ea:	d021      	beq.n	8002530 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ec:	f7ff f92c 	bl	8001748 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d302      	bcc.n	8002502 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d116      	bne.n	8002530 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	f043 0220 	orr.w	r2, r3, #32
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e007      	b.n	8002540 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b04      	cmp	r3, #4
 800253c:	d1ca      	bne.n	80024d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255e:	d11b      	bne.n	8002598 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002568:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	f043 0204 	orr.w	r2, r3, #4
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0cc      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025bc:	4b68      	ldr	r3, [pc, #416]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d90c      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b65      	ldr	r3, [pc, #404]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b63      	ldr	r3, [pc, #396]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0b8      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025fc:	4b59      	ldr	r3, [pc, #356]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a58      	ldr	r2, [pc, #352]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002614:	4b53      	ldr	r3, [pc, #332]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4a52      	ldr	r2, [pc, #328]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800261e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002620:	4b50      	ldr	r3, [pc, #320]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	494d      	ldr	r1, [pc, #308]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d044      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	4b47      	ldr	r3, [pc, #284]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d119      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e07f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d003      	beq.n	8002666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002662:	2b03      	cmp	r3, #3
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002666:	4b3f      	ldr	r3, [pc, #252]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e06f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e067      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002686:	4b37      	ldr	r3, [pc, #220]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f023 0203 	bic.w	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4934      	ldr	r1, [pc, #208]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	4313      	orrs	r3, r2
 8002696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002698:	f7ff f856 	bl	8001748 <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a0:	f7ff f852 	bl	8001748 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e04f      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 020c 	and.w	r2, r3, #12
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d1eb      	bne.n	80026a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026c8:	4b25      	ldr	r3, [pc, #148]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d20c      	bcs.n	80026f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b20      	ldr	r3, [pc, #128]	; (8002760 <HAL_RCC_ClockConfig+0x1b8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e032      	b.n	8002756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026fc:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4916      	ldr	r1, [pc, #88]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	490e      	ldr	r1, [pc, #56]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800272e:	f000 f855 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 8002732:	4602      	mov	r2, r0
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	490a      	ldr	r1, [pc, #40]	; (8002768 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	5ccb      	ldrb	r3, [r1, r3]
 8002742:	fa22 f303 	lsr.w	r3, r2, r3
 8002746:	4a09      	ldr	r2, [pc, #36]	; (800276c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x1c8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe ffb6 	bl	80016c0 <HAL_InitTick>

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023c00 	.word	0x40023c00
 8002764:	40023800 	.word	0x40023800
 8002768:	080064c8 	.word	0x080064c8
 800276c:	200003f8 	.word	0x200003f8
 8002770:	200003fc 	.word	0x200003fc

08002774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_RCC_GetHCLKFreq+0x14>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	200003f8 	.word	0x200003f8

0800278c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002790:	f7ff fff0 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	0a9b      	lsrs	r3, r3, #10
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	4903      	ldr	r1, [pc, #12]	; (80027b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40023800 	.word	0x40023800
 80027b0:	080064d8 	.word	0x080064d8

080027b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027b8:	f7ff ffdc 	bl	8002774 <HAL_RCC_GetHCLKFreq>
 80027bc:	4602      	mov	r2, r0
 80027be:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	0b5b      	lsrs	r3, r3, #13
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	4903      	ldr	r1, [pc, #12]	; (80027d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ca:	5ccb      	ldrb	r3, [r1, r3]
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	080064d8 	.word	0x080064d8

080027dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e0:	b0ae      	sub	sp, #184	; 0xb8
 80027e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002802:	4bcb      	ldr	r3, [pc, #812]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b0c      	cmp	r3, #12
 800280c:	f200 8206 	bhi.w	8002c1c <HAL_RCC_GetSysClockFreq+0x440>
 8002810:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	0800284d 	.word	0x0800284d
 800281c:	08002c1d 	.word	0x08002c1d
 8002820:	08002c1d 	.word	0x08002c1d
 8002824:	08002c1d 	.word	0x08002c1d
 8002828:	08002855 	.word	0x08002855
 800282c:	08002c1d 	.word	0x08002c1d
 8002830:	08002c1d 	.word	0x08002c1d
 8002834:	08002c1d 	.word	0x08002c1d
 8002838:	0800285d 	.word	0x0800285d
 800283c:	08002c1d 	.word	0x08002c1d
 8002840:	08002c1d 	.word	0x08002c1d
 8002844:	08002c1d 	.word	0x08002c1d
 8002848:	08002a4d 	.word	0x08002a4d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800284c:	4bb9      	ldr	r3, [pc, #740]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x358>)
 800284e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002852:	e1e7      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002854:	4bb8      	ldr	r3, [pc, #736]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002856:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800285a:	e1e3      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800285c:	4bb4      	ldr	r3, [pc, #720]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002864:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002868:	4bb1      	ldr	r3, [pc, #708]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d071      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002874:	4bae      	ldr	r3, [pc, #696]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	099b      	lsrs	r3, r3, #6
 800287a:	2200      	movs	r2, #0
 800287c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002880:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800288c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002890:	2300      	movs	r3, #0
 8002892:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002896:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800289a:	4622      	mov	r2, r4
 800289c:	462b      	mov	r3, r5
 800289e:	f04f 0000 	mov.w	r0, #0
 80028a2:	f04f 0100 	mov.w	r1, #0
 80028a6:	0159      	lsls	r1, r3, #5
 80028a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ac:	0150      	lsls	r0, r2, #5
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4621      	mov	r1, r4
 80028b4:	1a51      	subs	r1, r2, r1
 80028b6:	6439      	str	r1, [r7, #64]	; 0x40
 80028b8:	4629      	mov	r1, r5
 80028ba:	eb63 0301 	sbc.w	r3, r3, r1
 80028be:	647b      	str	r3, [r7, #68]	; 0x44
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80028cc:	4649      	mov	r1, r9
 80028ce:	018b      	lsls	r3, r1, #6
 80028d0:	4641      	mov	r1, r8
 80028d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028d6:	4641      	mov	r1, r8
 80028d8:	018a      	lsls	r2, r1, #6
 80028da:	4641      	mov	r1, r8
 80028dc:	1a51      	subs	r1, r2, r1
 80028de:	63b9      	str	r1, [r7, #56]	; 0x38
 80028e0:	4649      	mov	r1, r9
 80028e2:	eb63 0301 	sbc.w	r3, r3, r1
 80028e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80028f4:	4649      	mov	r1, r9
 80028f6:	00cb      	lsls	r3, r1, #3
 80028f8:	4641      	mov	r1, r8
 80028fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028fe:	4641      	mov	r1, r8
 8002900:	00ca      	lsls	r2, r1, #3
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	4603      	mov	r3, r0
 8002908:	4622      	mov	r2, r4
 800290a:	189b      	adds	r3, r3, r2
 800290c:	633b      	str	r3, [r7, #48]	; 0x30
 800290e:	462b      	mov	r3, r5
 8002910:	460a      	mov	r2, r1
 8002912:	eb42 0303 	adc.w	r3, r2, r3
 8002916:	637b      	str	r3, [r7, #52]	; 0x34
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002924:	4629      	mov	r1, r5
 8002926:	024b      	lsls	r3, r1, #9
 8002928:	4621      	mov	r1, r4
 800292a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800292e:	4621      	mov	r1, r4
 8002930:	024a      	lsls	r2, r1, #9
 8002932:	4610      	mov	r0, r2
 8002934:	4619      	mov	r1, r3
 8002936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800293a:	2200      	movs	r2, #0
 800293c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002940:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002944:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002948:	f7fd fc5c 	bl	8000204 <__aeabi_uldivmod>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4613      	mov	r3, r2
 8002952:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002956:	e067      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002958:	4b75      	ldr	r3, [pc, #468]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	099b      	lsrs	r3, r3, #6
 800295e:	2200      	movs	r2, #0
 8002960:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002964:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002968:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800296c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002970:	67bb      	str	r3, [r7, #120]	; 0x78
 8002972:	2300      	movs	r3, #0
 8002974:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002976:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800297a:	4622      	mov	r2, r4
 800297c:	462b      	mov	r3, r5
 800297e:	f04f 0000 	mov.w	r0, #0
 8002982:	f04f 0100 	mov.w	r1, #0
 8002986:	0159      	lsls	r1, r3, #5
 8002988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800298c:	0150      	lsls	r0, r2, #5
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4621      	mov	r1, r4
 8002994:	1a51      	subs	r1, r2, r1
 8002996:	62b9      	str	r1, [r7, #40]	; 0x28
 8002998:	4629      	mov	r1, r5
 800299a:	eb63 0301 	sbc.w	r3, r3, r1
 800299e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80029ac:	4649      	mov	r1, r9
 80029ae:	018b      	lsls	r3, r1, #6
 80029b0:	4641      	mov	r1, r8
 80029b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029b6:	4641      	mov	r1, r8
 80029b8:	018a      	lsls	r2, r1, #6
 80029ba:	4641      	mov	r1, r8
 80029bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80029c0:	4649      	mov	r1, r9
 80029c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029da:	4692      	mov	sl, r2
 80029dc:	469b      	mov	fp, r3
 80029de:	4623      	mov	r3, r4
 80029e0:	eb1a 0303 	adds.w	r3, sl, r3
 80029e4:	623b      	str	r3, [r7, #32]
 80029e6:	462b      	mov	r3, r5
 80029e8:	eb4b 0303 	adc.w	r3, fp, r3
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029fa:	4629      	mov	r1, r5
 80029fc:	028b      	lsls	r3, r1, #10
 80029fe:	4621      	mov	r1, r4
 8002a00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a04:	4621      	mov	r1, r4
 8002a06:	028a      	lsls	r2, r1, #10
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a10:	2200      	movs	r2, #0
 8002a12:	673b      	str	r3, [r7, #112]	; 0x70
 8002a14:	677a      	str	r2, [r7, #116]	; 0x74
 8002a16:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002a1a:	f7fd fbf3 	bl	8000204 <__aeabi_uldivmod>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4613      	mov	r3, r2
 8002a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a28:	4b41      	ldr	r3, [pc, #260]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	3301      	adds	r3, #1
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002a3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a4a:	e0eb      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a4c:	4b38      	ldr	r3, [pc, #224]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a58:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d06b      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a64:	4b32      	ldr	r3, [pc, #200]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	099b      	lsrs	r3, r3, #6
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a76:	663b      	str	r3, [r7, #96]	; 0x60
 8002a78:	2300      	movs	r3, #0
 8002a7a:	667b      	str	r3, [r7, #100]	; 0x64
 8002a7c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002a80:	4622      	mov	r2, r4
 8002a82:	462b      	mov	r3, r5
 8002a84:	f04f 0000 	mov.w	r0, #0
 8002a88:	f04f 0100 	mov.w	r1, #0
 8002a8c:	0159      	lsls	r1, r3, #5
 8002a8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a92:	0150      	lsls	r0, r2, #5
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4621      	mov	r1, r4
 8002a9a:	1a51      	subs	r1, r2, r1
 8002a9c:	61b9      	str	r1, [r7, #24]
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	eb63 0301 	sbc.w	r3, r3, r1
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ab2:	4659      	mov	r1, fp
 8002ab4:	018b      	lsls	r3, r1, #6
 8002ab6:	4651      	mov	r1, sl
 8002ab8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002abc:	4651      	mov	r1, sl
 8002abe:	018a      	lsls	r2, r1, #6
 8002ac0:	4651      	mov	r1, sl
 8002ac2:	ebb2 0801 	subs.w	r8, r2, r1
 8002ac6:	4659      	mov	r1, fp
 8002ac8:	eb63 0901 	sbc.w	r9, r3, r1
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ad8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002adc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ae0:	4690      	mov	r8, r2
 8002ae2:	4699      	mov	r9, r3
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	eb18 0303 	adds.w	r3, r8, r3
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	462b      	mov	r3, r5
 8002aee:	eb49 0303 	adc.w	r3, r9, r3
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b00:	4629      	mov	r1, r5
 8002b02:	024b      	lsls	r3, r1, #9
 8002b04:	4621      	mov	r1, r4
 8002b06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	024a      	lsls	r2, r1, #9
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b16:	2200      	movs	r2, #0
 8002b18:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b1a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b20:	f7fd fb70 	bl	8000204 <__aeabi_uldivmod>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4613      	mov	r3, r2
 8002b2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b2e:	e065      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x420>
 8002b30:	40023800 	.word	0x40023800
 8002b34:	00f42400 	.word	0x00f42400
 8002b38:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3c:	4b3d      	ldr	r3, [pc, #244]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	2200      	movs	r2, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	4611      	mov	r1, r2
 8002b48:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b4c:	653b      	str	r3, [r7, #80]	; 0x50
 8002b4e:	2300      	movs	r3, #0
 8002b50:	657b      	str	r3, [r7, #84]	; 0x54
 8002b52:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002b56:	4642      	mov	r2, r8
 8002b58:	464b      	mov	r3, r9
 8002b5a:	f04f 0000 	mov.w	r0, #0
 8002b5e:	f04f 0100 	mov.w	r1, #0
 8002b62:	0159      	lsls	r1, r3, #5
 8002b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b68:	0150      	lsls	r0, r2, #5
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4641      	mov	r1, r8
 8002b70:	1a51      	subs	r1, r2, r1
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	4649      	mov	r1, r9
 8002b76:	eb63 0301 	sbc.w	r3, r3, r1
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b88:	4659      	mov	r1, fp
 8002b8a:	018b      	lsls	r3, r1, #6
 8002b8c:	4651      	mov	r1, sl
 8002b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b92:	4651      	mov	r1, sl
 8002b94:	018a      	lsls	r2, r1, #6
 8002b96:	4651      	mov	r1, sl
 8002b98:	1a54      	subs	r4, r2, r1
 8002b9a:	4659      	mov	r1, fp
 8002b9c:	eb63 0501 	sbc.w	r5, r3, r1
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	00eb      	lsls	r3, r5, #3
 8002baa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bae:	00e2      	lsls	r2, r4, #3
 8002bb0:	4614      	mov	r4, r2
 8002bb2:	461d      	mov	r5, r3
 8002bb4:	4643      	mov	r3, r8
 8002bb6:	18e3      	adds	r3, r4, r3
 8002bb8:	603b      	str	r3, [r7, #0]
 8002bba:	464b      	mov	r3, r9
 8002bbc:	eb45 0303 	adc.w	r3, r5, r3
 8002bc0:	607b      	str	r3, [r7, #4]
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bce:	4629      	mov	r1, r5
 8002bd0:	028b      	lsls	r3, r1, #10
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bd8:	4621      	mov	r1, r4
 8002bda:	028a      	lsls	r2, r1, #10
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002be4:	2200      	movs	r2, #0
 8002be6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002be8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002bea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bee:	f7fd fb09 	bl	8000204 <__aeabi_uldivmod>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bfc:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x458>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	0f1b      	lsrs	r3, r3, #28
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002c0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c1a:	e003      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	37b8      	adds	r7, #184	; 0xb8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800
 8002c38:	00f42400 	.word	0x00f42400

08002c3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e28d      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 8083 	beq.w	8002d62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c5c:	4b94      	ldr	r3, [pc, #592]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d019      	beq.n	8002c9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c68:	4b91      	ldr	r3, [pc, #580]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d106      	bne.n	8002c82 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c74:	4b8e      	ldr	r3, [pc, #568]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c80:	d00c      	beq.n	8002c9c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c82:	4b8b      	ldr	r3, [pc, #556]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d112      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c8e:	4b88      	ldr	r3, [pc, #544]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9c:	4b84      	ldr	r3, [pc, #528]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d05b      	beq.n	8002d60 <HAL_RCC_OscConfig+0x124>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d157      	bne.n	8002d60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e25a      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbc:	d106      	bne.n	8002ccc <HAL_RCC_OscConfig+0x90>
 8002cbe:	4b7c      	ldr	r3, [pc, #496]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a7b      	ldr	r2, [pc, #492]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	e01d      	b.n	8002d08 <HAL_RCC_OscConfig+0xcc>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0xb4>
 8002cd6:	4b76      	ldr	r3, [pc, #472]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a75      	ldr	r2, [pc, #468]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b73      	ldr	r3, [pc, #460]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a72      	ldr	r2, [pc, #456]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	e00b      	b.n	8002d08 <HAL_RCC_OscConfig+0xcc>
 8002cf0:	4b6f      	ldr	r3, [pc, #444]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a6e      	ldr	r2, [pc, #440]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b6c      	ldr	r3, [pc, #432]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a6b      	ldr	r2, [pc, #428]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d013      	beq.n	8002d38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7fe fd1a 	bl	8001748 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d18:	f7fe fd16 	bl	8001748 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e21f      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	4b61      	ldr	r3, [pc, #388]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0xdc>
 8002d36:	e014      	b.n	8002d62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe fd06 	bl	8001748 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d40:	f7fe fd02 	bl	8001748 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e20b      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d52:	4b57      	ldr	r3, [pc, #348]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x104>
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d06f      	beq.n	8002e4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d6e:	4b50      	ldr	r3, [pc, #320]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d017      	beq.n	8002daa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d7a:	4b4d      	ldr	r3, [pc, #308]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d105      	bne.n	8002d92 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d86:	4b4a      	ldr	r3, [pc, #296]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d92:	4b47      	ldr	r3, [pc, #284]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d9a:	2b0c      	cmp	r3, #12
 8002d9c:	d11c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d9e:	4b44      	ldr	r3, [pc, #272]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d116      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002daa:	4b41      	ldr	r3, [pc, #260]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x186>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d001      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e1d3      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc2:	4b3b      	ldr	r3, [pc, #236]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4937      	ldr	r1, [pc, #220]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	e03a      	b.n	8002e4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de0:	4b34      	ldr	r3, [pc, #208]	; (8002eb4 <HAL_RCC_OscConfig+0x278>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de6:	f7fe fcaf 	bl	8001748 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dee:	f7fe fcab 	bl	8001748 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e1b4      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e00:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0c:	4b28      	ldr	r3, [pc, #160]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4925      	ldr	r1, [pc, #148]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]
 8002e20:	e015      	b.n	8002e4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e22:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <HAL_RCC_OscConfig+0x278>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe fc8e 	bl	8001748 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e30:	f7fe fc8a 	bl	8001748 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e193      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e42:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d036      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d016      	beq.n	8002e90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e68:	f7fe fc6e 	bl	8001748 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e70:	f7fe fc6a 	bl	8001748 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e173      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e82:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_RCC_OscConfig+0x274>)
 8002e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x234>
 8002e8e:	e01b      	b.n	8002ec8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_RCC_OscConfig+0x27c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e96:	f7fe fc57 	bl	8001748 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e9c:	e00e      	b.n	8002ebc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e9e:	f7fe fc53 	bl	8001748 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d907      	bls.n	8002ebc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e15c      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	42470000 	.word	0x42470000
 8002eb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ebc:	4b8a      	ldr	r3, [pc, #552]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1ea      	bne.n	8002e9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8097 	beq.w	8003004 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eda:	4b83      	ldr	r3, [pc, #524]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10f      	bne.n	8002f06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	4b7f      	ldr	r3, [pc, #508]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	4a7e      	ldr	r2, [pc, #504]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef6:	4b7c      	ldr	r3, [pc, #496]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f02:	2301      	movs	r3, #1
 8002f04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f06:	4b79      	ldr	r3, [pc, #484]	; (80030ec <HAL_RCC_OscConfig+0x4b0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d118      	bne.n	8002f44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f12:	4b76      	ldr	r3, [pc, #472]	; (80030ec <HAL_RCC_OscConfig+0x4b0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a75      	ldr	r2, [pc, #468]	; (80030ec <HAL_RCC_OscConfig+0x4b0>)
 8002f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1e:	f7fe fc13 	bl	8001748 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f26:	f7fe fc0f 	bl	8001748 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e118      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f38:	4b6c      	ldr	r3, [pc, #432]	; (80030ec <HAL_RCC_OscConfig+0x4b0>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d106      	bne.n	8002f5a <HAL_RCC_OscConfig+0x31e>
 8002f4c:	4b66      	ldr	r3, [pc, #408]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	4a65      	ldr	r2, [pc, #404]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6713      	str	r3, [r2, #112]	; 0x70
 8002f58:	e01c      	b.n	8002f94 <HAL_RCC_OscConfig+0x358>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b05      	cmp	r3, #5
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x340>
 8002f62:	4b61      	ldr	r3, [pc, #388]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	4a60      	ldr	r2, [pc, #384]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f68:	f043 0304 	orr.w	r3, r3, #4
 8002f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6e:	4b5e      	ldr	r3, [pc, #376]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	4a5d      	ldr	r2, [pc, #372]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7a:	e00b      	b.n	8002f94 <HAL_RCC_OscConfig+0x358>
 8002f7c:	4b5a      	ldr	r3, [pc, #360]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	4a59      	ldr	r2, [pc, #356]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f82:	f023 0301 	bic.w	r3, r3, #1
 8002f86:	6713      	str	r3, [r2, #112]	; 0x70
 8002f88:	4b57      	ldr	r3, [pc, #348]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	4a56      	ldr	r2, [pc, #344]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002f8e:	f023 0304 	bic.w	r3, r3, #4
 8002f92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d015      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9c:	f7fe fbd4 	bl	8001748 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa4:	f7fe fbd0 	bl	8001748 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e0d7      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fba:	4b4b      	ldr	r3, [pc, #300]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0ee      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x368>
 8002fc6:	e014      	b.n	8002ff2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fe fbbe 	bl	8001748 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fe fbba 	bl	8001748 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e0c1      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe6:	4b40      	ldr	r3, [pc, #256]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1ee      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ff2:	7dfb      	ldrb	r3, [r7, #23]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d105      	bne.n	8003004 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff8:	4b3b      	ldr	r3, [pc, #236]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	4a3a      	ldr	r2, [pc, #232]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8002ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003002:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80ad 	beq.w	8003168 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800300e:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b08      	cmp	r3, #8
 8003018:	d060      	beq.n	80030dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d145      	bne.n	80030ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003022:	4b33      	ldr	r3, [pc, #204]	; (80030f0 <HAL_RCC_OscConfig+0x4b4>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe fb8e 	bl	8001748 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003030:	f7fe fb8a 	bl	8001748 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e093      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	4b29      	ldr	r3, [pc, #164]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69da      	ldr	r2, [r3, #28]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	019b      	lsls	r3, r3, #6
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	085b      	lsrs	r3, r3, #1
 8003066:	3b01      	subs	r3, #1
 8003068:	041b      	lsls	r3, r3, #16
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	061b      	lsls	r3, r3, #24
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	071b      	lsls	r3, r3, #28
 800307a:	491b      	ldr	r1, [pc, #108]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 800307c:	4313      	orrs	r3, r2
 800307e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003080:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <HAL_RCC_OscConfig+0x4b4>)
 8003082:	2201      	movs	r2, #1
 8003084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7fe fb5f 	bl	8001748 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308e:	f7fe fb5b 	bl	8001748 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e064      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a0:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f0      	beq.n	800308e <HAL_RCC_OscConfig+0x452>
 80030ac:	e05c      	b.n	8003168 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ae:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <HAL_RCC_OscConfig+0x4b4>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe fb48 	bl	8001748 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030bc:	f7fe fb44 	bl	8001748 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e04d      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <HAL_RCC_OscConfig+0x4ac>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x480>
 80030da:	e045      	b.n	8003168 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d107      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e040      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40007000 	.word	0x40007000
 80030f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030f4:	4b1f      	ldr	r3, [pc, #124]	; (8003174 <HAL_RCC_OscConfig+0x538>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d030      	beq.n	8003164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d129      	bne.n	8003164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d122      	bne.n	8003164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003124:	4013      	ands	r3, r2
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800312a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800312c:	4293      	cmp	r3, r2
 800312e:	d119      	bne.n	8003164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	085b      	lsrs	r3, r3, #1
 800313c:	3b01      	subs	r3, #1
 800313e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003140:	429a      	cmp	r2, r3
 8003142:	d10f      	bne.n	8003164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d107      	bne.n	8003164 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800

08003178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e041      	b.n	800320e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fe f8c0 	bl	8001324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3304      	adds	r3, #4
 80031b4:	4619      	mov	r1, r3
 80031b6:	4610      	mov	r0, r2
 80031b8:	f000 fee4 	bl	8003f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	d001      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e04e      	b.n	80032ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a23      	ldr	r2, [pc, #140]	; (80032dc <HAL_TIM_Base_Start_IT+0xc4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d022      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x80>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325a:	d01d      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x80>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a1f      	ldr	r2, [pc, #124]	; (80032e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d018      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x80>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1e      	ldr	r2, [pc, #120]	; (80032e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d013      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x80>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a1c      	ldr	r2, [pc, #112]	; (80032e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00e      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x80>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1b      	ldr	r2, [pc, #108]	; (80032ec <HAL_TIM_Base_Start_IT+0xd4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d009      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x80>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a19      	ldr	r2, [pc, #100]	; (80032f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x80>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a18      	ldr	r2, [pc, #96]	; (80032f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d111      	bne.n	80032bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b06      	cmp	r3, #6
 80032a8:	d010      	beq.n	80032cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0201 	orr.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ba:	e007      	b.n	80032cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40010000 	.word	0x40010000
 80032e0:	40000400 	.word	0x40000400
 80032e4:	40000800 	.word	0x40000800
 80032e8:	40000c00 	.word	0x40000c00
 80032ec:	40010400 	.word	0x40010400
 80032f0:	40014000 	.word	0x40014000
 80032f4:	40001800 	.word	0x40001800

080032f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6a1a      	ldr	r2, [r3, #32]
 8003316:	f241 1311 	movw	r3, #4369	; 0x1111
 800331a:	4013      	ands	r3, r2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10f      	bne.n	8003340 <HAL_TIM_Base_Stop_IT+0x48>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6a1a      	ldr	r2, [r3, #32]
 8003326:	f240 4344 	movw	r3, #1092	; 0x444
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d107      	bne.n	8003340 <HAL_TIM_Base_Stop_IT+0x48>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e041      	b.n	80033ec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d106      	bne.n	8003382 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f839 	bl	80033f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2202      	movs	r2, #2
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3304      	adds	r3, #4
 8003392:	4619      	mov	r1, r3
 8003394:	4610      	mov	r0, r2
 8003396:	f000 fdf5 	bl	8003f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d109      	bne.n	800342c <HAL_TIM_PWM_Start+0x24>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b01      	cmp	r3, #1
 8003422:	bf14      	ite	ne
 8003424:	2301      	movne	r3, #1
 8003426:	2300      	moveq	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	e022      	b.n	8003472 <HAL_TIM_PWM_Start+0x6a>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	2b04      	cmp	r3, #4
 8003430:	d109      	bne.n	8003446 <HAL_TIM_PWM_Start+0x3e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b01      	cmp	r3, #1
 800343c:	bf14      	ite	ne
 800343e:	2301      	movne	r3, #1
 8003440:	2300      	moveq	r3, #0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	e015      	b.n	8003472 <HAL_TIM_PWM_Start+0x6a>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b08      	cmp	r3, #8
 800344a:	d109      	bne.n	8003460 <HAL_TIM_PWM_Start+0x58>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b01      	cmp	r3, #1
 8003456:	bf14      	ite	ne
 8003458:	2301      	movne	r3, #1
 800345a:	2300      	moveq	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e008      	b.n	8003472 <HAL_TIM_PWM_Start+0x6a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	bf14      	ite	ne
 800346c:	2301      	movne	r3, #1
 800346e:	2300      	moveq	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e07c      	b.n	8003574 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d104      	bne.n	800348a <HAL_TIM_PWM_Start+0x82>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003488:	e013      	b.n	80034b2 <HAL_TIM_PWM_Start+0xaa>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b04      	cmp	r3, #4
 800348e:	d104      	bne.n	800349a <HAL_TIM_PWM_Start+0x92>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003498:	e00b      	b.n	80034b2 <HAL_TIM_PWM_Start+0xaa>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d104      	bne.n	80034aa <HAL_TIM_PWM_Start+0xa2>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034a8:	e003      	b.n	80034b2 <HAL_TIM_PWM_Start+0xaa>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2202      	movs	r2, #2
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2201      	movs	r2, #1
 80034b8:	6839      	ldr	r1, [r7, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 f84c 	bl	8004558 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a2d      	ldr	r2, [pc, #180]	; (800357c <HAL_TIM_PWM_Start+0x174>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_TIM_PWM_Start+0xcc>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a2c      	ldr	r2, [pc, #176]	; (8003580 <HAL_TIM_PWM_Start+0x178>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d101      	bne.n	80034d8 <HAL_TIM_PWM_Start+0xd0>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <HAL_TIM_PWM_Start+0xd2>
 80034d8:	2300      	movs	r3, #0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d007      	beq.n	80034ee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a22      	ldr	r2, [pc, #136]	; (800357c <HAL_TIM_PWM_Start+0x174>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d022      	beq.n	800353e <HAL_TIM_PWM_Start+0x136>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003500:	d01d      	beq.n	800353e <HAL_TIM_PWM_Start+0x136>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1f      	ldr	r2, [pc, #124]	; (8003584 <HAL_TIM_PWM_Start+0x17c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d018      	beq.n	800353e <HAL_TIM_PWM_Start+0x136>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a1d      	ldr	r2, [pc, #116]	; (8003588 <HAL_TIM_PWM_Start+0x180>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d013      	beq.n	800353e <HAL_TIM_PWM_Start+0x136>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a1c      	ldr	r2, [pc, #112]	; (800358c <HAL_TIM_PWM_Start+0x184>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00e      	beq.n	800353e <HAL_TIM_PWM_Start+0x136>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a16      	ldr	r2, [pc, #88]	; (8003580 <HAL_TIM_PWM_Start+0x178>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d009      	beq.n	800353e <HAL_TIM_PWM_Start+0x136>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a18      	ldr	r2, [pc, #96]	; (8003590 <HAL_TIM_PWM_Start+0x188>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d004      	beq.n	800353e <HAL_TIM_PWM_Start+0x136>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a16      	ldr	r2, [pc, #88]	; (8003594 <HAL_TIM_PWM_Start+0x18c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d111      	bne.n	8003562 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b06      	cmp	r3, #6
 800354e:	d010      	beq.n	8003572 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003560:	e007      	b.n	8003572 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40010000 	.word	0x40010000
 8003580:	40010400 	.word	0x40010400
 8003584:	40000400 	.word	0x40000400
 8003588:	40000800 	.word	0x40000800
 800358c:	40000c00 	.word	0x40000c00
 8003590:	40014000 	.word	0x40014000
 8003594:	40001800 	.word	0x40001800

08003598 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2200      	movs	r2, #0
 80035a8:	6839      	ldr	r1, [r7, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 ffd4 	bl	8004558 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a2e      	ldr	r2, [pc, #184]	; (8003670 <HAL_TIM_PWM_Stop+0xd8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d004      	beq.n	80035c4 <HAL_TIM_PWM_Stop+0x2c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a2d      	ldr	r2, [pc, #180]	; (8003674 <HAL_TIM_PWM_Stop+0xdc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d101      	bne.n	80035c8 <HAL_TIM_PWM_Stop+0x30>
 80035c4:	2301      	movs	r3, #1
 80035c6:	e000      	b.n	80035ca <HAL_TIM_PWM_Stop+0x32>
 80035c8:	2300      	movs	r3, #0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d017      	beq.n	80035fe <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6a1a      	ldr	r2, [r3, #32]
 80035d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80035d8:	4013      	ands	r3, r2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10f      	bne.n	80035fe <HAL_TIM_PWM_Stop+0x66>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6a1a      	ldr	r2, [r3, #32]
 80035e4:	f240 4344 	movw	r3, #1092	; 0x444
 80035e8:	4013      	ands	r3, r2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d107      	bne.n	80035fe <HAL_TIM_PWM_Stop+0x66>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6a1a      	ldr	r2, [r3, #32]
 8003604:	f241 1311 	movw	r3, #4369	; 0x1111
 8003608:	4013      	ands	r3, r2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10f      	bne.n	800362e <HAL_TIM_PWM_Stop+0x96>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6a1a      	ldr	r2, [r3, #32]
 8003614:	f240 4344 	movw	r3, #1092	; 0x444
 8003618:	4013      	ands	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d107      	bne.n	800362e <HAL_TIM_PWM_Stop+0x96>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0201 	bic.w	r2, r2, #1
 800362c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d104      	bne.n	800363e <HAL_TIM_PWM_Stop+0xa6>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800363c:	e013      	b.n	8003666 <HAL_TIM_PWM_Stop+0xce>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b04      	cmp	r3, #4
 8003642:	d104      	bne.n	800364e <HAL_TIM_PWM_Stop+0xb6>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800364c:	e00b      	b.n	8003666 <HAL_TIM_PWM_Stop+0xce>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b08      	cmp	r3, #8
 8003652:	d104      	bne.n	800365e <HAL_TIM_PWM_Stop+0xc6>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800365c:	e003      	b.n	8003666 <HAL_TIM_PWM_Stop+0xce>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40010000 	.word	0x40010000
 8003674:	40010400 	.word	0x40010400

08003678 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e097      	b.n	80037bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7fd feab 	bl	80013fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2202      	movs	r2, #2
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6812      	ldr	r2, [r2, #0]
 80036b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036bc:	f023 0307 	bic.w	r3, r3, #7
 80036c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3304      	adds	r3, #4
 80036ca:	4619      	mov	r1, r3
 80036cc:	4610      	mov	r0, r2
 80036ce:	f000 fc59 	bl	8003f84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036fa:	f023 0303 	bic.w	r3, r3, #3
 80036fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	4313      	orrs	r3, r2
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003718:	f023 030c 	bic.w	r3, r3, #12
 800371c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003724:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003728:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	021b      	lsls	r3, r3, #8
 8003734:	4313      	orrs	r3, r2
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4313      	orrs	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	011a      	lsls	r2, r3, #4
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	031b      	lsls	r3, r3, #12
 8003748:	4313      	orrs	r3, r2
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003756:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800375e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	4313      	orrs	r3, r2
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80037ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d110      	bne.n	8003816 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d102      	bne.n	8003800 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80037fa:	7b7b      	ldrb	r3, [r7, #13]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d001      	beq.n	8003804 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e069      	b.n	80038d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003814:	e031      	b.n	800387a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b04      	cmp	r3, #4
 800381a:	d110      	bne.n	800383e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800381c:	7bbb      	ldrb	r3, [r7, #14]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d102      	bne.n	8003828 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003822:	7b3b      	ldrb	r3, [r7, #12]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d001      	beq.n	800382c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e055      	b.n	80038d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800383c:	e01d      	b.n	800387a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d108      	bne.n	8003856 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003844:	7bbb      	ldrb	r3, [r7, #14]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d105      	bne.n	8003856 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800384a:	7b7b      	ldrb	r3, [r7, #13]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d102      	bne.n	8003856 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003850:	7b3b      	ldrb	r3, [r7, #12]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d001      	beq.n	800385a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e03e      	b.n	80038d8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2202      	movs	r2, #2
 800385e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2202      	movs	r2, #2
 8003866:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2202      	movs	r2, #2
 800386e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2202      	movs	r2, #2
 8003876:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_TIM_Encoder_Start+0xc4>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b04      	cmp	r3, #4
 8003884:	d008      	beq.n	8003898 <HAL_TIM_Encoder_Start+0xd4>
 8003886:	e00f      	b.n	80038a8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2201      	movs	r2, #1
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fe61 	bl	8004558 <TIM_CCxChannelCmd>
      break;
 8003896:	e016      	b.n	80038c6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2201      	movs	r2, #1
 800389e:	2104      	movs	r1, #4
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fe59 	bl	8004558 <TIM_CCxChannelCmd>
      break;
 80038a6:	e00e      	b.n	80038c6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2201      	movs	r2, #1
 80038ae:	2100      	movs	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fe51 	bl	8004558 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2201      	movs	r2, #1
 80038bc:	2104      	movs	r1, #4
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fe4a 	bl	8004558 <TIM_CCxChannelCmd>
      break;
 80038c4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0201 	orr.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_TIM_Encoder_Stop+0x18>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d008      	beq.n	8003908 <HAL_TIM_Encoder_Stop+0x28>
 80038f6:	e00f      	b.n	8003918 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2200      	movs	r2, #0
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fe29 	bl	8004558 <TIM_CCxChannelCmd>
      break;
 8003906:	e016      	b.n	8003936 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2200      	movs	r2, #0
 800390e:	2104      	movs	r1, #4
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fe21 	bl	8004558 <TIM_CCxChannelCmd>
      break;
 8003916:	e00e      	b.n	8003936 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2200      	movs	r2, #0
 800391e:	2100      	movs	r1, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fe19 	bl	8004558 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2200      	movs	r2, #0
 800392c:	2104      	movs	r1, #4
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fe12 	bl	8004558 <TIM_CCxChannelCmd>
      break;
 8003934:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a1a      	ldr	r2, [r3, #32]
 800393c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003940:	4013      	ands	r3, r2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10f      	bne.n	8003966 <HAL_TIM_Encoder_Stop+0x86>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6a1a      	ldr	r2, [r3, #32]
 800394c:	f240 4344 	movw	r3, #1092	; 0x444
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d107      	bne.n	8003966 <HAL_TIM_Encoder_Stop+0x86>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <HAL_TIM_Encoder_Stop+0x92>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b04      	cmp	r3, #4
 8003970:	d138      	bne.n	80039e4 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d104      	bne.n	8003982 <HAL_TIM_Encoder_Stop+0xa2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003980:	e013      	b.n	80039aa <HAL_TIM_Encoder_Stop+0xca>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b04      	cmp	r3, #4
 8003986:	d104      	bne.n	8003992 <HAL_TIM_Encoder_Stop+0xb2>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003990:	e00b      	b.n	80039aa <HAL_TIM_Encoder_Stop+0xca>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_Encoder_Stop+0xc2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a0:	e003      	b.n	80039aa <HAL_TIM_Encoder_Stop+0xca>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_Encoder_Stop+0xda>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039b8:	e024      	b.n	8003a04 <HAL_TIM_Encoder_Stop+0x124>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d104      	bne.n	80039ca <HAL_TIM_Encoder_Stop+0xea>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039c8:	e01c      	b.n	8003a04 <HAL_TIM_Encoder_Stop+0x124>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d104      	bne.n	80039da <HAL_TIM_Encoder_Stop+0xfa>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d8:	e014      	b.n	8003a04 <HAL_TIM_Encoder_Stop+0x124>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039e2:	e00f      	b.n	8003a04 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d122      	bne.n	8003a6a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d11b      	bne.n	8003a6a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f06f 0202 	mvn.w	r2, #2
 8003a3a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fa78 	bl	8003f46 <HAL_TIM_IC_CaptureCallback>
 8003a56:	e005      	b.n	8003a64 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fa6a 	bl	8003f32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa7b 	bl	8003f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d122      	bne.n	8003abe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d11b      	bne.n	8003abe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f06f 0204 	mvn.w	r2, #4
 8003a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fa4e 	bl	8003f46 <HAL_TIM_IC_CaptureCallback>
 8003aaa:	e005      	b.n	8003ab8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fa40 	bl	8003f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa51 	bl	8003f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d122      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d11b      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f06f 0208 	mvn.w	r2, #8
 8003ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2204      	movs	r2, #4
 8003ae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f003 0303 	and.w	r3, r3, #3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fa24 	bl	8003f46 <HAL_TIM_IC_CaptureCallback>
 8003afe:	e005      	b.n	8003b0c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fa16 	bl	8003f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fa27 	bl	8003f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d122      	bne.n	8003b66 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d11b      	bne.n	8003b66 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f06f 0210 	mvn.w	r2, #16
 8003b36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2208      	movs	r2, #8
 8003b3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f9fa 	bl	8003f46 <HAL_TIM_IC_CaptureCallback>
 8003b52:	e005      	b.n	8003b60 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f9ec 	bl	8003f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f9fd 	bl	8003f5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d10e      	bne.n	8003b92 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d107      	bne.n	8003b92 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f06f 0201 	mvn.w	r2, #1
 8003b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7fc fe5f 	bl	8000850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9c:	2b80      	cmp	r3, #128	; 0x80
 8003b9e:	d10e      	bne.n	8003bbe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003baa:	2b80      	cmp	r3, #128	; 0x80
 8003bac:	d107      	bne.n	8003bbe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fee3 	bl	8004984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d10e      	bne.n	8003bea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd6:	2b40      	cmp	r3, #64	; 0x40
 8003bd8:	d107      	bne.n	8003bea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f9c2 	bl	8003f6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d10e      	bne.n	8003c16 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d107      	bne.n	8003c16 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f06f 0220 	mvn.w	r2, #32
 8003c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 fead 	bl	8004970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e0ae      	b.n	8003d9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b0c      	cmp	r3, #12
 8003c4a:	f200 809f 	bhi.w	8003d8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c4e:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c54:	08003c89 	.word	0x08003c89
 8003c58:	08003d8d 	.word	0x08003d8d
 8003c5c:	08003d8d 	.word	0x08003d8d
 8003c60:	08003d8d 	.word	0x08003d8d
 8003c64:	08003cc9 	.word	0x08003cc9
 8003c68:	08003d8d 	.word	0x08003d8d
 8003c6c:	08003d8d 	.word	0x08003d8d
 8003c70:	08003d8d 	.word	0x08003d8d
 8003c74:	08003d0b 	.word	0x08003d0b
 8003c78:	08003d8d 	.word	0x08003d8d
 8003c7c:	08003d8d 	.word	0x08003d8d
 8003c80:	08003d8d 	.word	0x08003d8d
 8003c84:	08003d4b 	.word	0x08003d4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fa18 	bl	80040c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0208 	orr.w	r2, r2, #8
 8003ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0204 	bic.w	r2, r2, #4
 8003cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6999      	ldr	r1, [r3, #24]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	691a      	ldr	r2, [r3, #16]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	619a      	str	r2, [r3, #24]
      break;
 8003cc6:	e064      	b.n	8003d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fa68 	bl	80041a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699a      	ldr	r2, [r3, #24]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699a      	ldr	r2, [r3, #24]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6999      	ldr	r1, [r3, #24]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	021a      	lsls	r2, r3, #8
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	619a      	str	r2, [r3, #24]
      break;
 8003d08:	e043      	b.n	8003d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68b9      	ldr	r1, [r7, #8]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fabd 	bl	8004290 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0208 	orr.w	r2, r2, #8
 8003d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0204 	bic.w	r2, r2, #4
 8003d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69d9      	ldr	r1, [r3, #28]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	61da      	str	r2, [r3, #28]
      break;
 8003d48:	e023      	b.n	8003d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68b9      	ldr	r1, [r7, #8]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fb11 	bl	8004378 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	69da      	ldr	r2, [r3, #28]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69da      	ldr	r2, [r3, #28]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69d9      	ldr	r1, [r3, #28]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	021a      	lsls	r2, r3, #8
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	61da      	str	r2, [r3, #28]
      break;
 8003d8a:	e002      	b.n	8003d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_TIM_ConfigClockSource+0x1c>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e0b4      	b.n	8003f2a <HAL_TIM_ConfigClockSource+0x186>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003de6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003df8:	d03e      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0xd4>
 8003dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dfe:	f200 8087 	bhi.w	8003f10 <HAL_TIM_ConfigClockSource+0x16c>
 8003e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e06:	f000 8086 	beq.w	8003f16 <HAL_TIM_ConfigClockSource+0x172>
 8003e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0e:	d87f      	bhi.n	8003f10 <HAL_TIM_ConfigClockSource+0x16c>
 8003e10:	2b70      	cmp	r3, #112	; 0x70
 8003e12:	d01a      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0xa6>
 8003e14:	2b70      	cmp	r3, #112	; 0x70
 8003e16:	d87b      	bhi.n	8003f10 <HAL_TIM_ConfigClockSource+0x16c>
 8003e18:	2b60      	cmp	r3, #96	; 0x60
 8003e1a:	d050      	beq.n	8003ebe <HAL_TIM_ConfigClockSource+0x11a>
 8003e1c:	2b60      	cmp	r3, #96	; 0x60
 8003e1e:	d877      	bhi.n	8003f10 <HAL_TIM_ConfigClockSource+0x16c>
 8003e20:	2b50      	cmp	r3, #80	; 0x50
 8003e22:	d03c      	beq.n	8003e9e <HAL_TIM_ConfigClockSource+0xfa>
 8003e24:	2b50      	cmp	r3, #80	; 0x50
 8003e26:	d873      	bhi.n	8003f10 <HAL_TIM_ConfigClockSource+0x16c>
 8003e28:	2b40      	cmp	r3, #64	; 0x40
 8003e2a:	d058      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0x13a>
 8003e2c:	2b40      	cmp	r3, #64	; 0x40
 8003e2e:	d86f      	bhi.n	8003f10 <HAL_TIM_ConfigClockSource+0x16c>
 8003e30:	2b30      	cmp	r3, #48	; 0x30
 8003e32:	d064      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0x15a>
 8003e34:	2b30      	cmp	r3, #48	; 0x30
 8003e36:	d86b      	bhi.n	8003f10 <HAL_TIM_ConfigClockSource+0x16c>
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d060      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0x15a>
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d867      	bhi.n	8003f10 <HAL_TIM_ConfigClockSource+0x16c>
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d05c      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0x15a>
 8003e44:	2b10      	cmp	r3, #16
 8003e46:	d05a      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0x15a>
 8003e48:	e062      	b.n	8003f10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	6899      	ldr	r1, [r3, #8]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f000 fb5d 	bl	8004518 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	609a      	str	r2, [r3, #8]
      break;
 8003e76:	e04f      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6899      	ldr	r1, [r3, #8]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f000 fb46 	bl	8004518 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e9a:	609a      	str	r2, [r3, #8]
      break;
 8003e9c:	e03c      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	6859      	ldr	r1, [r3, #4]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f000 faba 	bl	8004424 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2150      	movs	r1, #80	; 0x50
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fb13 	bl	80044e2 <TIM_ITRx_SetConfig>
      break;
 8003ebc:	e02c      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	6859      	ldr	r1, [r3, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	f000 fad9 	bl	8004482 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2160      	movs	r1, #96	; 0x60
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fb03 	bl	80044e2 <TIM_ITRx_SetConfig>
      break;
 8003edc:	e01c      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	461a      	mov	r2, r3
 8003eec:	f000 fa9a 	bl	8004424 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2140      	movs	r1, #64	; 0x40
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 faf3 	bl	80044e2 <TIM_ITRx_SetConfig>
      break;
 8003efc:	e00c      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4619      	mov	r1, r3
 8003f08:	4610      	mov	r0, r2
 8003f0a:	f000 faea 	bl	80044e2 <TIM_ITRx_SetConfig>
      break;
 8003f0e:	e003      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
      break;
 8003f14:	e000      	b.n	8003f18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a40      	ldr	r2, [pc, #256]	; (8004098 <TIM_Base_SetConfig+0x114>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d013      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa2:	d00f      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a3d      	ldr	r2, [pc, #244]	; (800409c <TIM_Base_SetConfig+0x118>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00b      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a3c      	ldr	r2, [pc, #240]	; (80040a0 <TIM_Base_SetConfig+0x11c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a3b      	ldr	r2, [pc, #236]	; (80040a4 <TIM_Base_SetConfig+0x120>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_Base_SetConfig+0x40>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a3a      	ldr	r2, [pc, #232]	; (80040a8 <TIM_Base_SetConfig+0x124>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d108      	bne.n	8003fd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a2f      	ldr	r2, [pc, #188]	; (8004098 <TIM_Base_SetConfig+0x114>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d02b      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe4:	d027      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a2c      	ldr	r2, [pc, #176]	; (800409c <TIM_Base_SetConfig+0x118>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d023      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a2b      	ldr	r2, [pc, #172]	; (80040a0 <TIM_Base_SetConfig+0x11c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01f      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a2a      	ldr	r2, [pc, #168]	; (80040a4 <TIM_Base_SetConfig+0x120>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d01b      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a29      	ldr	r2, [pc, #164]	; (80040a8 <TIM_Base_SetConfig+0x124>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d017      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a28      	ldr	r2, [pc, #160]	; (80040ac <TIM_Base_SetConfig+0x128>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d013      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a27      	ldr	r2, [pc, #156]	; (80040b0 <TIM_Base_SetConfig+0x12c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00f      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a26      	ldr	r2, [pc, #152]	; (80040b4 <TIM_Base_SetConfig+0x130>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00b      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a25      	ldr	r2, [pc, #148]	; (80040b8 <TIM_Base_SetConfig+0x134>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d007      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a24      	ldr	r2, [pc, #144]	; (80040bc <TIM_Base_SetConfig+0x138>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d003      	beq.n	8004036 <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a23      	ldr	r2, [pc, #140]	; (80040c0 <TIM_Base_SetConfig+0x13c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d108      	bne.n	8004048 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800403c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <TIM_Base_SetConfig+0x114>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d003      	beq.n	800407c <TIM_Base_SetConfig+0xf8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a0c      	ldr	r2, [pc, #48]	; (80040a8 <TIM_Base_SetConfig+0x124>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d103      	bne.n	8004084 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	615a      	str	r2, [r3, #20]
}
 800408a:	bf00      	nop
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40010000 	.word	0x40010000
 800409c:	40000400 	.word	0x40000400
 80040a0:	40000800 	.word	0x40000800
 80040a4:	40000c00 	.word	0x40000c00
 80040a8:	40010400 	.word	0x40010400
 80040ac:	40014000 	.word	0x40014000
 80040b0:	40014400 	.word	0x40014400
 80040b4:	40014800 	.word	0x40014800
 80040b8:	40001800 	.word	0x40001800
 80040bc:	40001c00 	.word	0x40001c00
 80040c0:	40002000 	.word	0x40002000

080040c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	f023 0201 	bic.w	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0303 	bic.w	r3, r3, #3
 80040fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f023 0302 	bic.w	r3, r3, #2
 800410c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a20      	ldr	r2, [pc, #128]	; (800419c <TIM_OC1_SetConfig+0xd8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d003      	beq.n	8004128 <TIM_OC1_SetConfig+0x64>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a1f      	ldr	r2, [pc, #124]	; (80041a0 <TIM_OC1_SetConfig+0xdc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d10c      	bne.n	8004142 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f023 0308 	bic.w	r3, r3, #8
 800412e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f023 0304 	bic.w	r3, r3, #4
 8004140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a15      	ldr	r2, [pc, #84]	; (800419c <TIM_OC1_SetConfig+0xd8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d003      	beq.n	8004152 <TIM_OC1_SetConfig+0x8e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a14      	ldr	r2, [pc, #80]	; (80041a0 <TIM_OC1_SetConfig+0xdc>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d111      	bne.n	8004176 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4313      	orrs	r3, r2
 8004174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	621a      	str	r2, [r3, #32]
}
 8004190:	bf00      	nop
 8004192:	371c      	adds	r7, #28
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	40010000 	.word	0x40010000
 80041a0:	40010400 	.word	0x40010400

080041a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	f023 0210 	bic.w	r2, r3, #16
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	021b      	lsls	r3, r3, #8
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f023 0320 	bic.w	r3, r3, #32
 80041ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a22      	ldr	r2, [pc, #136]	; (8004288 <TIM_OC2_SetConfig+0xe4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d003      	beq.n	800420c <TIM_OC2_SetConfig+0x68>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a21      	ldr	r2, [pc, #132]	; (800428c <TIM_OC2_SetConfig+0xe8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d10d      	bne.n	8004228 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004226:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a17      	ldr	r2, [pc, #92]	; (8004288 <TIM_OC2_SetConfig+0xe4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d003      	beq.n	8004238 <TIM_OC2_SetConfig+0x94>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a16      	ldr	r2, [pc, #88]	; (800428c <TIM_OC2_SetConfig+0xe8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d113      	bne.n	8004260 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800423e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004246:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40010000 	.word	0x40010000
 800428c:	40010400 	.word	0x40010400

08004290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0303 	bic.w	r3, r3, #3
 80042c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a21      	ldr	r2, [pc, #132]	; (8004370 <TIM_OC3_SetConfig+0xe0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d003      	beq.n	80042f6 <TIM_OC3_SetConfig+0x66>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a20      	ldr	r2, [pc, #128]	; (8004374 <TIM_OC3_SetConfig+0xe4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d10d      	bne.n	8004312 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a16      	ldr	r2, [pc, #88]	; (8004370 <TIM_OC3_SetConfig+0xe0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d003      	beq.n	8004322 <TIM_OC3_SetConfig+0x92>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a15      	ldr	r2, [pc, #84]	; (8004374 <TIM_OC3_SetConfig+0xe4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d113      	bne.n	800434a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	621a      	str	r2, [r3, #32]
}
 8004364:	bf00      	nop
 8004366:	371c      	adds	r7, #28
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	40010000 	.word	0x40010000
 8004374:	40010400 	.word	0x40010400

08004378 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	031b      	lsls	r3, r3, #12
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a12      	ldr	r2, [pc, #72]	; (800441c <TIM_OC4_SetConfig+0xa4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d003      	beq.n	80043e0 <TIM_OC4_SetConfig+0x68>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a11      	ldr	r2, [pc, #68]	; (8004420 <TIM_OC4_SetConfig+0xa8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d109      	bne.n	80043f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	019b      	lsls	r3, r3, #6
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	621a      	str	r2, [r3, #32]
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40010000 	.word	0x40010000
 8004420:	40010400 	.word	0x40010400

08004424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f023 0201 	bic.w	r2, r3, #1
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800444e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f023 030a 	bic.w	r3, r3, #10
 8004460:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	621a      	str	r2, [r3, #32]
}
 8004476:	bf00      	nop
 8004478:	371c      	adds	r7, #28
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004482:	b480      	push	{r7}
 8004484:	b087      	sub	sp, #28
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	f023 0210 	bic.w	r2, r3, #16
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	031b      	lsls	r3, r3, #12
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	621a      	str	r2, [r3, #32]
}
 80044d6:	bf00      	nop
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b085      	sub	sp, #20
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	f043 0307 	orr.w	r3, r3, #7
 8004504:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	609a      	str	r2, [r3, #8]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004532:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	021a      	lsls	r2, r3, #8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	431a      	orrs	r2, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4313      	orrs	r3, r2
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	609a      	str	r2, [r3, #8]
}
 800454c:	bf00      	nop
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 031f 	and.w	r3, r3, #31
 800456a:	2201      	movs	r2, #1
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1a      	ldr	r2, [r3, #32]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	43db      	mvns	r3, r3
 800457a:	401a      	ands	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a1a      	ldr	r2, [r3, #32]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f003 031f 	and.w	r3, r3, #31
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	fa01 f303 	lsl.w	r3, r1, r3
 8004590:	431a      	orrs	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	621a      	str	r2, [r3, #32]
}
 8004596:	bf00      	nop
 8004598:	371c      	adds	r7, #28
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d109      	bne.n	80045c8 <HAL_TIMEx_PWMN_Start+0x24>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	bf14      	ite	ne
 80045c0:	2301      	movne	r3, #1
 80045c2:	2300      	moveq	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	e022      	b.n	800460e <HAL_TIMEx_PWMN_Start+0x6a>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d109      	bne.n	80045e2 <HAL_TIMEx_PWMN_Start+0x3e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	bf14      	ite	ne
 80045da:	2301      	movne	r3, #1
 80045dc:	2300      	moveq	r3, #0
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	e015      	b.n	800460e <HAL_TIMEx_PWMN_Start+0x6a>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d109      	bne.n	80045fc <HAL_TIMEx_PWMN_Start+0x58>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	bf14      	ite	ne
 80045f4:	2301      	movne	r3, #1
 80045f6:	2300      	moveq	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	e008      	b.n	800460e <HAL_TIMEx_PWMN_Start+0x6a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b01      	cmp	r3, #1
 8004606:	bf14      	ite	ne
 8004608:	2301      	movne	r3, #1
 800460a:	2300      	moveq	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e06d      	b.n	80046f2 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d104      	bne.n	8004626 <HAL_TIMEx_PWMN_Start+0x82>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004624:	e013      	b.n	800464e <HAL_TIMEx_PWMN_Start+0xaa>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b04      	cmp	r3, #4
 800462a:	d104      	bne.n	8004636 <HAL_TIMEx_PWMN_Start+0x92>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004634:	e00b      	b.n	800464e <HAL_TIMEx_PWMN_Start+0xaa>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d104      	bne.n	8004646 <HAL_TIMEx_PWMN_Start+0xa2>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004644:	e003      	b.n	800464e <HAL_TIMEx_PWMN_Start+0xaa>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2202      	movs	r2, #2
 800464a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2204      	movs	r2, #4
 8004654:	6839      	ldr	r1, [r7, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f99e 	bl	8004998 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800466a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a22      	ldr	r2, [pc, #136]	; (80046fc <HAL_TIMEx_PWMN_Start+0x158>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d022      	beq.n	80046bc <HAL_TIMEx_PWMN_Start+0x118>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467e:	d01d      	beq.n	80046bc <HAL_TIMEx_PWMN_Start+0x118>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a1e      	ldr	r2, [pc, #120]	; (8004700 <HAL_TIMEx_PWMN_Start+0x15c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d018      	beq.n	80046bc <HAL_TIMEx_PWMN_Start+0x118>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a1d      	ldr	r2, [pc, #116]	; (8004704 <HAL_TIMEx_PWMN_Start+0x160>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d013      	beq.n	80046bc <HAL_TIMEx_PWMN_Start+0x118>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1b      	ldr	r2, [pc, #108]	; (8004708 <HAL_TIMEx_PWMN_Start+0x164>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00e      	beq.n	80046bc <HAL_TIMEx_PWMN_Start+0x118>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1a      	ldr	r2, [pc, #104]	; (800470c <HAL_TIMEx_PWMN_Start+0x168>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d009      	beq.n	80046bc <HAL_TIMEx_PWMN_Start+0x118>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a18      	ldr	r2, [pc, #96]	; (8004710 <HAL_TIMEx_PWMN_Start+0x16c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d004      	beq.n	80046bc <HAL_TIMEx_PWMN_Start+0x118>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a17      	ldr	r2, [pc, #92]	; (8004714 <HAL_TIMEx_PWMN_Start+0x170>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d111      	bne.n	80046e0 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b06      	cmp	r3, #6
 80046cc:	d010      	beq.n	80046f0 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0201 	orr.w	r2, r2, #1
 80046dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046de:	e007      	b.n	80046f0 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40010000 	.word	0x40010000
 8004700:	40000400 	.word	0x40000400
 8004704:	40000800 	.word	0x40000800
 8004708:	40000c00 	.word	0x40000c00
 800470c:	40010400 	.word	0x40010400
 8004710:	40014000 	.word	0x40014000
 8004714:	40001800 	.word	0x40001800

08004718 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2200      	movs	r2, #0
 8004728:	6839      	ldr	r1, [r7, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f000 f934 	bl	8004998 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6a1a      	ldr	r2, [r3, #32]
 8004736:	f241 1311 	movw	r3, #4369	; 0x1111
 800473a:	4013      	ands	r3, r2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10f      	bne.n	8004760 <HAL_TIMEx_PWMN_Stop+0x48>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6a1a      	ldr	r2, [r3, #32]
 8004746:	f240 4344 	movw	r3, #1092	; 0x444
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d107      	bne.n	8004760 <HAL_TIMEx_PWMN_Stop+0x48>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800475e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6a1a      	ldr	r2, [r3, #32]
 8004766:	f241 1311 	movw	r3, #4369	; 0x1111
 800476a:	4013      	ands	r3, r2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10f      	bne.n	8004790 <HAL_TIMEx_PWMN_Stop+0x78>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6a1a      	ldr	r2, [r3, #32]
 8004776:	f240 4344 	movw	r3, #1092	; 0x444
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d107      	bne.n	8004790 <HAL_TIMEx_PWMN_Stop+0x78>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <HAL_TIMEx_PWMN_Stop+0x88>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800479e:	e013      	b.n	80047c8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d104      	bne.n	80047b0 <HAL_TIMEx_PWMN_Stop+0x98>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047ae:	e00b      	b.n	80047c8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d104      	bne.n	80047c0 <HAL_TIMEx_PWMN_Stop+0xa8>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047be:	e003      	b.n	80047c8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d101      	bne.n	80047ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047e8:	2302      	movs	r3, #2
 80047ea:	e05a      	b.n	80048a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a21      	ldr	r2, [pc, #132]	; (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d022      	beq.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004838:	d01d      	beq.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1d      	ldr	r2, [pc, #116]	; (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d018      	beq.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a1b      	ldr	r2, [pc, #108]	; (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1a      	ldr	r2, [pc, #104]	; (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00e      	beq.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d009      	beq.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a17      	ldr	r2, [pc, #92]	; (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d004      	beq.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a15      	ldr	r2, [pc, #84]	; (80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d10c      	bne.n	8004890 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800487c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	4313      	orrs	r3, r2
 8004886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40010000 	.word	0x40010000
 80048b4:	40000400 	.word	0x40000400
 80048b8:	40000800 	.word	0x40000800
 80048bc:	40000c00 	.word	0x40000c00
 80048c0:	40010400 	.word	0x40010400
 80048c4:	40014000 	.word	0x40014000
 80048c8:	40001800 	.word	0x40001800

080048cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e03d      	b.n	8004964 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	2204      	movs	r2, #4
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a1a      	ldr	r2, [r3, #32]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	43db      	mvns	r3, r3
 80049ba:	401a      	ands	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a1a      	ldr	r2, [r3, #32]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f003 031f 	and.w	r3, r3, #31
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	fa01 f303 	lsl.w	r3, r1, r3
 80049d0:	431a      	orrs	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	621a      	str	r2, [r3, #32]
}
 80049d6:	bf00      	nop
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e03f      	b.n	8004a74 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d106      	bne.n	8004a0e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7fc fdc5 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2224      	movs	r2, #36	; 0x24
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a24:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f828 	bl	8004a7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691a      	ldr	r2, [r3, #16]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a3a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695a      	ldr	r2, [r3, #20]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a4a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a5a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a80:	b0c0      	sub	sp, #256	; 0x100
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a98:	68d9      	ldr	r1, [r3, #12]
 8004a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	ea40 0301 	orr.w	r3, r0, r1
 8004aa4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	431a      	orrs	r2, r3
 8004abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ad4:	f021 010c 	bic.w	r1, r1, #12
 8004ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af6:	6999      	ldr	r1, [r3, #24]
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	ea40 0301 	orr.w	r3, r0, r1
 8004b02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	4b8f      	ldr	r3, [pc, #572]	; (8004d48 <UART_SetConfig+0x2cc>)
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d005      	beq.n	8004b1c <UART_SetConfig+0xa0>
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	4b8d      	ldr	r3, [pc, #564]	; (8004d4c <UART_SetConfig+0x2d0>)
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d104      	bne.n	8004b26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b1c:	f7fd fe4a 	bl	80027b4 <HAL_RCC_GetPCLK2Freq>
 8004b20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b24:	e003      	b.n	8004b2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b26:	f7fd fe31 	bl	800278c <HAL_RCC_GetPCLK1Freq>
 8004b2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b38:	f040 810c 	bne.w	8004d54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b40:	2200      	movs	r2, #0
 8004b42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b4e:	4622      	mov	r2, r4
 8004b50:	462b      	mov	r3, r5
 8004b52:	1891      	adds	r1, r2, r2
 8004b54:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b56:	415b      	adcs	r3, r3
 8004b58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b5e:	4621      	mov	r1, r4
 8004b60:	eb12 0801 	adds.w	r8, r2, r1
 8004b64:	4629      	mov	r1, r5
 8004b66:	eb43 0901 	adc.w	r9, r3, r1
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b7e:	4690      	mov	r8, r2
 8004b80:	4699      	mov	r9, r3
 8004b82:	4623      	mov	r3, r4
 8004b84:	eb18 0303 	adds.w	r3, r8, r3
 8004b88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b8c:	462b      	mov	r3, r5
 8004b8e:	eb49 0303 	adc.w	r3, r9, r3
 8004b92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ba2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ba6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004baa:	460b      	mov	r3, r1
 8004bac:	18db      	adds	r3, r3, r3
 8004bae:	653b      	str	r3, [r7, #80]	; 0x50
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	eb42 0303 	adc.w	r3, r2, r3
 8004bb6:	657b      	str	r3, [r7, #84]	; 0x54
 8004bb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004bbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004bc0:	f7fb fb20 	bl	8000204 <__aeabi_uldivmod>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4b61      	ldr	r3, [pc, #388]	; (8004d50 <UART_SetConfig+0x2d4>)
 8004bca:	fba3 2302 	umull	r2, r3, r3, r2
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	011c      	lsls	r4, r3, #4
 8004bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bdc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004be0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004be4:	4642      	mov	r2, r8
 8004be6:	464b      	mov	r3, r9
 8004be8:	1891      	adds	r1, r2, r2
 8004bea:	64b9      	str	r1, [r7, #72]	; 0x48
 8004bec:	415b      	adcs	r3, r3
 8004bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	eb12 0a01 	adds.w	sl, r2, r1
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	eb43 0b01 	adc.w	fp, r3, r1
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c14:	4692      	mov	sl, r2
 8004c16:	469b      	mov	fp, r3
 8004c18:	4643      	mov	r3, r8
 8004c1a:	eb1a 0303 	adds.w	r3, sl, r3
 8004c1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c22:	464b      	mov	r3, r9
 8004c24:	eb4b 0303 	adc.w	r3, fp, r3
 8004c28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c40:	460b      	mov	r3, r1
 8004c42:	18db      	adds	r3, r3, r3
 8004c44:	643b      	str	r3, [r7, #64]	; 0x40
 8004c46:	4613      	mov	r3, r2
 8004c48:	eb42 0303 	adc.w	r3, r2, r3
 8004c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c56:	f7fb fad5 	bl	8000204 <__aeabi_uldivmod>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4611      	mov	r1, r2
 8004c60:	4b3b      	ldr	r3, [pc, #236]	; (8004d50 <UART_SetConfig+0x2d4>)
 8004c62:	fba3 2301 	umull	r2, r3, r3, r1
 8004c66:	095b      	lsrs	r3, r3, #5
 8004c68:	2264      	movs	r2, #100	; 0x64
 8004c6a:	fb02 f303 	mul.w	r3, r2, r3
 8004c6e:	1acb      	subs	r3, r1, r3
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c76:	4b36      	ldr	r3, [pc, #216]	; (8004d50 <UART_SetConfig+0x2d4>)
 8004c78:	fba3 2302 	umull	r2, r3, r3, r2
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c84:	441c      	add	r4, r3
 8004c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c98:	4642      	mov	r2, r8
 8004c9a:	464b      	mov	r3, r9
 8004c9c:	1891      	adds	r1, r2, r2
 8004c9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ca0:	415b      	adcs	r3, r3
 8004ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ca8:	4641      	mov	r1, r8
 8004caa:	1851      	adds	r1, r2, r1
 8004cac:	6339      	str	r1, [r7, #48]	; 0x30
 8004cae:	4649      	mov	r1, r9
 8004cb0:	414b      	adcs	r3, r1
 8004cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004cc0:	4659      	mov	r1, fp
 8004cc2:	00cb      	lsls	r3, r1, #3
 8004cc4:	4651      	mov	r1, sl
 8004cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cca:	4651      	mov	r1, sl
 8004ccc:	00ca      	lsls	r2, r1, #3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	4642      	mov	r2, r8
 8004cd6:	189b      	adds	r3, r3, r2
 8004cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cdc:	464b      	mov	r3, r9
 8004cde:	460a      	mov	r2, r1
 8004ce0:	eb42 0303 	adc.w	r3, r2, r3
 8004ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cf4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004cf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	18db      	adds	r3, r3, r3
 8004d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d02:	4613      	mov	r3, r2
 8004d04:	eb42 0303 	adc.w	r3, r2, r3
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d12:	f7fb fa77 	bl	8000204 <__aeabi_uldivmod>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <UART_SetConfig+0x2d4>)
 8004d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	2164      	movs	r1, #100	; 0x64
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	3332      	adds	r3, #50	; 0x32
 8004d2e:	4a08      	ldr	r2, [pc, #32]	; (8004d50 <UART_SetConfig+0x2d4>)
 8004d30:	fba2 2303 	umull	r2, r3, r2, r3
 8004d34:	095b      	lsrs	r3, r3, #5
 8004d36:	f003 0207 	and.w	r2, r3, #7
 8004d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4422      	add	r2, r4
 8004d42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d44:	e105      	b.n	8004f52 <UART_SetConfig+0x4d6>
 8004d46:	bf00      	nop
 8004d48:	40011000 	.word	0x40011000
 8004d4c:	40011400 	.word	0x40011400
 8004d50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d66:	4642      	mov	r2, r8
 8004d68:	464b      	mov	r3, r9
 8004d6a:	1891      	adds	r1, r2, r2
 8004d6c:	6239      	str	r1, [r7, #32]
 8004d6e:	415b      	adcs	r3, r3
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
 8004d72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d76:	4641      	mov	r1, r8
 8004d78:	1854      	adds	r4, r2, r1
 8004d7a:	4649      	mov	r1, r9
 8004d7c:	eb43 0501 	adc.w	r5, r3, r1
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	f04f 0300 	mov.w	r3, #0
 8004d88:	00eb      	lsls	r3, r5, #3
 8004d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d8e:	00e2      	lsls	r2, r4, #3
 8004d90:	4614      	mov	r4, r2
 8004d92:	461d      	mov	r5, r3
 8004d94:	4643      	mov	r3, r8
 8004d96:	18e3      	adds	r3, r4, r3
 8004d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d9c:	464b      	mov	r3, r9
 8004d9e:	eb45 0303 	adc.w	r3, r5, r3
 8004da2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004db2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004dc2:	4629      	mov	r1, r5
 8004dc4:	008b      	lsls	r3, r1, #2
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dcc:	4621      	mov	r1, r4
 8004dce:	008a      	lsls	r2, r1, #2
 8004dd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004dd4:	f7fb fa16 	bl	8000204 <__aeabi_uldivmod>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4b60      	ldr	r3, [pc, #384]	; (8004f60 <UART_SetConfig+0x4e4>)
 8004dde:	fba3 2302 	umull	r2, r3, r3, r2
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	011c      	lsls	r4, r3, #4
 8004de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004df0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004df4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004df8:	4642      	mov	r2, r8
 8004dfa:	464b      	mov	r3, r9
 8004dfc:	1891      	adds	r1, r2, r2
 8004dfe:	61b9      	str	r1, [r7, #24]
 8004e00:	415b      	adcs	r3, r3
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e08:	4641      	mov	r1, r8
 8004e0a:	1851      	adds	r1, r2, r1
 8004e0c:	6139      	str	r1, [r7, #16]
 8004e0e:	4649      	mov	r1, r9
 8004e10:	414b      	adcs	r3, r1
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e20:	4659      	mov	r1, fp
 8004e22:	00cb      	lsls	r3, r1, #3
 8004e24:	4651      	mov	r1, sl
 8004e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e2a:	4651      	mov	r1, sl
 8004e2c:	00ca      	lsls	r2, r1, #3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	4619      	mov	r1, r3
 8004e32:	4603      	mov	r3, r0
 8004e34:	4642      	mov	r2, r8
 8004e36:	189b      	adds	r3, r3, r2
 8004e38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e3c:	464b      	mov	r3, r9
 8004e3e:	460a      	mov	r2, r1
 8004e40:	eb42 0303 	adc.w	r3, r2, r3
 8004e44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e60:	4649      	mov	r1, r9
 8004e62:	008b      	lsls	r3, r1, #2
 8004e64:	4641      	mov	r1, r8
 8004e66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e6a:	4641      	mov	r1, r8
 8004e6c:	008a      	lsls	r2, r1, #2
 8004e6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e72:	f7fb f9c7 	bl	8000204 <__aeabi_uldivmod>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4b39      	ldr	r3, [pc, #228]	; (8004f60 <UART_SetConfig+0x4e4>)
 8004e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e80:	095b      	lsrs	r3, r3, #5
 8004e82:	2164      	movs	r1, #100	; 0x64
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	3332      	adds	r3, #50	; 0x32
 8004e8e:	4a34      	ldr	r2, [pc, #208]	; (8004f60 <UART_SetConfig+0x4e4>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e9a:	441c      	add	r4, r3
 8004e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	673b      	str	r3, [r7, #112]	; 0x70
 8004ea4:	677a      	str	r2, [r7, #116]	; 0x74
 8004ea6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004eaa:	4642      	mov	r2, r8
 8004eac:	464b      	mov	r3, r9
 8004eae:	1891      	adds	r1, r2, r2
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	415b      	adcs	r3, r3
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eba:	4641      	mov	r1, r8
 8004ebc:	1851      	adds	r1, r2, r1
 8004ebe:	6039      	str	r1, [r7, #0]
 8004ec0:	4649      	mov	r1, r9
 8004ec2:	414b      	adcs	r3, r1
 8004ec4:	607b      	str	r3, [r7, #4]
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ed2:	4659      	mov	r1, fp
 8004ed4:	00cb      	lsls	r3, r1, #3
 8004ed6:	4651      	mov	r1, sl
 8004ed8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004edc:	4651      	mov	r1, sl
 8004ede:	00ca      	lsls	r2, r1, #3
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	4642      	mov	r2, r8
 8004ee8:	189b      	adds	r3, r3, r2
 8004eea:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eec:	464b      	mov	r3, r9
 8004eee:	460a      	mov	r2, r1
 8004ef0:	eb42 0303 	adc.w	r3, r2, r3
 8004ef4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	663b      	str	r3, [r7, #96]	; 0x60
 8004f00:	667a      	str	r2, [r7, #100]	; 0x64
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	f04f 0300 	mov.w	r3, #0
 8004f0a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f0e:	4649      	mov	r1, r9
 8004f10:	008b      	lsls	r3, r1, #2
 8004f12:	4641      	mov	r1, r8
 8004f14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f18:	4641      	mov	r1, r8
 8004f1a:	008a      	lsls	r2, r1, #2
 8004f1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f20:	f7fb f970 	bl	8000204 <__aeabi_uldivmod>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4b0d      	ldr	r3, [pc, #52]	; (8004f60 <UART_SetConfig+0x4e4>)
 8004f2a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	2164      	movs	r1, #100	; 0x64
 8004f32:	fb01 f303 	mul.w	r3, r1, r3
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	3332      	adds	r3, #50	; 0x32
 8004f3c:	4a08      	ldr	r2, [pc, #32]	; (8004f60 <UART_SetConfig+0x4e4>)
 8004f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	f003 020f 	and.w	r2, r3, #15
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4422      	add	r2, r4
 8004f50:	609a      	str	r2, [r3, #8]
}
 8004f52:	bf00      	nop
 8004f54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f5e:	bf00      	nop
 8004f60:	51eb851f 	.word	0x51eb851f

08004f64 <__libc_init_array>:
 8004f64:	b570      	push	{r4, r5, r6, lr}
 8004f66:	4d0d      	ldr	r5, [pc, #52]	; (8004f9c <__libc_init_array+0x38>)
 8004f68:	4c0d      	ldr	r4, [pc, #52]	; (8004fa0 <__libc_init_array+0x3c>)
 8004f6a:	1b64      	subs	r4, r4, r5
 8004f6c:	10a4      	asrs	r4, r4, #2
 8004f6e:	2600      	movs	r6, #0
 8004f70:	42a6      	cmp	r6, r4
 8004f72:	d109      	bne.n	8004f88 <__libc_init_array+0x24>
 8004f74:	4d0b      	ldr	r5, [pc, #44]	; (8004fa4 <__libc_init_array+0x40>)
 8004f76:	4c0c      	ldr	r4, [pc, #48]	; (8004fa8 <__libc_init_array+0x44>)
 8004f78:	f000 f820 	bl	8004fbc <_init>
 8004f7c:	1b64      	subs	r4, r4, r5
 8004f7e:	10a4      	asrs	r4, r4, #2
 8004f80:	2600      	movs	r6, #0
 8004f82:	42a6      	cmp	r6, r4
 8004f84:	d105      	bne.n	8004f92 <__libc_init_array+0x2e>
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
 8004f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f8c:	4798      	blx	r3
 8004f8e:	3601      	adds	r6, #1
 8004f90:	e7ee      	b.n	8004f70 <__libc_init_array+0xc>
 8004f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f96:	4798      	blx	r3
 8004f98:	3601      	adds	r6, #1
 8004f9a:	e7f2      	b.n	8004f82 <__libc_init_array+0x1e>
 8004f9c:	080064e8 	.word	0x080064e8
 8004fa0:	080064e8 	.word	0x080064e8
 8004fa4:	080064e8 	.word	0x080064e8
 8004fa8:	080064ec 	.word	0x080064ec

08004fac <memset>:
 8004fac:	4402      	add	r2, r0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d100      	bne.n	8004fb6 <memset+0xa>
 8004fb4:	4770      	bx	lr
 8004fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fba:	e7f9      	b.n	8004fb0 <memset+0x4>

08004fbc <_init>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr

08004fc8 <_fini>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	bf00      	nop
 8004fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fce:	bc08      	pop	{r3}
 8004fd0:	469e      	mov	lr, r3
 8004fd2:	4770      	bx	lr
